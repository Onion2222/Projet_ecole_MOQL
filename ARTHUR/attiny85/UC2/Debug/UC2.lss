
UC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000902  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065b  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063f  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	5f c0       	rjmp	.+190    	; 0xca <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 e4       	ldi	r30, 0x44	; 68
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 36       	cpi	r26, 0x66	; 102
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	ca d0       	rcall	.+404    	; 0x1e6 <main>
  52:	f6 c0       	rjmp	.+492    	; 0x240 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <ADC_init>:
void ADC_start(){
	ADCSRA|=0x40;
}

void ADC_stop(){
	ADCSRA&=~0x40;
  56:	83 e9       	ldi	r24, 0x93	; 147
  58:	87 b9       	out	0x07, r24	; 7
  5a:	8e ee       	ldi	r24, 0xEE	; 238
  5c:	86 b9       	out	0x06, r24	; 6
  5e:	13 b8       	out	0x03, r1	; 3
  60:	08 95       	ret

00000062 <ADC_getMesure>:
}

uint16_t ADC_getMesure(){
	//voir page 137 datasheet
	uint8_t vL=ADCL; //ATTENTION A LORDRE DE LECTURE DE CES REGISTRE
  62:	24 b1       	in	r18, 0x04	; 4
	uint8_t vH=ADCH; //JE SUIS RESTE BLOQUE UNE HEURE A CAUSE DE CETTE MERDE
  64:	85 b1       	in	r24, 0x05	; 5
	//BORDEL POURQUOI Y A UN ORDRE DE LECTURE ?????

	return (vH<<8)+vL;
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	98 2f       	mov	r25, r24
  6a:	88 27       	eor	r24, r24
}
  6c:	82 0f       	add	r24, r18
  6e:	91 1d       	adc	r25, r1
  70:	08 95       	ret

00000072 <__vector_8>:
uint8_t sens=0;
uint8_t obstacle=0;
uint16_t mesure_temp;


ISR(ADC_vect){
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	2f 93       	push	r18
  7e:	3f 93       	push	r19
  80:	4f 93       	push	r20
  82:	5f 93       	push	r21
  84:	6f 93       	push	r22
  86:	7f 93       	push	r23
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	af 93       	push	r26
  8e:	bf 93       	push	r27
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31

	if(ADC_getMesure()>=300){
  94:	e6 df       	rcall	.-52     	; 0x62 <ADC_getMesure>
  96:	8c 32       	cpi	r24, 0x2C	; 44
  98:	91 40       	sbci	r25, 0x01	; 1
  9a:	20 f0       	brcs	.+8      	; 0xa4 <__vector_8+0x32>
		//si obstacle...
		obstacle=1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__vector_8+0x36>
	}else{
		//sinon...
		obstacle=0;
  a4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}

}
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	7f 91       	pop	r23
  b6:	6f 91       	pop	r22
  b8:	5f 91       	pop	r21
  ba:	4f 91       	pop	r20
  bc:	3f 91       	pop	r19
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_5>:


ISR(TIMER0_OVF_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	if(++var_timer0_interupt>=1)
  ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <var_timer0_interupt>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <var_timer0_interupt>
  f6:	88 23       	and	r24, r24
  f8:	b1 f0       	breq	.+44     	; 0x126 <__vector_5+0x5c>
	{
		
		if(angle==5){ //min 3
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	21 f4       	brne	.+8      	; 0x10a <__vector_5+0x40>
			angle=13; //max 17
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 108:	09 c0       	rjmp	.+18     	; 0x11c <__vector_5+0x52>
		}
		else{
			if(angle==13){ //max 17
 10a:	8d 30       	cpi	r24, 0x0D	; 13
 10c:	21 f4       	brne	.+8      	; 0x116 <__vector_5+0x4c>
				angle=5; //min 3
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 114:	03 c0       	rjmp	.+6      	; 0x11c <__vector_5+0x52>
			}else{
				angle=5; //min 3
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			}
		}
		PWM_timer1_set(angle);
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 120:	8d d0       	rcall	.+282    	; 0x23c <PWM_timer1_set>
		var_timer0_interupt=0;
 122:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <var_timer0_interupt>
	}
	

}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_14>:



ISR (USI_OVF_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	PORTB^=0x10; //PB3 test
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	89 27       	eor	r24, r25
 170:	88 bb       	out	0x18, r24	; 24
	uint8_t reception=USIDR;
 172:	8f b1       	in	r24, 0x0f	; 15

	switch (reception)
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	b1 f0       	breq	.+44     	; 0x1a4 <__vector_14+0x5c>
 178:	18 f4       	brcc	.+6      	; 0x180 <__vector_14+0x38>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	31 f0       	breq	.+12     	; 0x18a <__vector_14+0x42>
 17e:	1c c0       	rjmp	.+56     	; 0x1b8 <__vector_14+0x70>
 180:	85 30       	cpi	r24, 0x05	; 5
 182:	b9 f0       	breq	.+46     	; 0x1b2 <__vector_14+0x6a>
 184:	89 30       	cpi	r24, 0x09	; 9
 186:	21 f0       	breq	.+8      	; 0x190 <__vector_14+0x48>
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <__vector_14+0x70>
	{
	case 0x01:
		USIDR = 0x05;//ACK ping
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	8f b9       	out	0x0f, r24	; 15
		break;
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <__vector_14+0x70>
	
	case 0x09: //rapport d'etat
		if(obstacle) USIDR=0x02;
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <__vector_14+0x56>
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	8f b9       	out	0x0f, r24	; 15
 19c:	0d c0       	rjmp	.+26     	; 0x1b8 <__vector_14+0x70>
		else USIDR=0x01;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8f b9       	out	0x0f, r24	; 15
 1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <__vector_14+0x70>
		break;
	case 0x04: //capt first 8bits
		mesure_temp=ADC_getMesure();
 1a4:	5e df       	rcall	.-324    	; 0x62 <ADC_getMesure>
 1a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mesure_temp>
 1aa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <mesure_temp+0x1>
		USIDR=(uint8_t)mesure_temp;
 1ae:	8f b9       	out	0x0f, r24	; 15
		break;
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <__vector_14+0x70>
	case 0x05: //capt 2 bits left
		USIDR=(uint8_t)(mesure_temp>>8); //ATTENTION 10bit alors qu'envoie 8 !!!!
 1b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mesure_temp+0x1>
 1b6:	8f b9       	out	0x0f, r24	; 15
	


	
	
	USISR = 1<<USIOIF;
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	8e b9       	out	0x0e, r24	; 14
	
	
	PORTB^=0x10; //PB3 test
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	89 27       	eor	r24, r25
 1c2:	88 bb       	out	0x18, r24	; 24

}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:

int main(void)
{
	//PORTB=0xFF;//0000 1000
	DDRB=0x10;
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	87 bb       	out	0x17, r24	; 23
	DDRB|=0x10; //PB4 test 0001 0000
 1ea:	bc 9a       	sbi	0x17, 4	; 23
	PORTB&=~0x10;
 1ec:	c4 98       	cbi	0x18, 4	; 24

	
	PWM_timer1_init();
 1ee:	17 d0       	rcall	.+46     	; 0x21e <PWM_timer1_init>
	PWM_timer1_start();
 1f0:	21 d0       	rcall	.+66     	; 0x234 <PWM_timer1_start>
	
	timer0_init();
 1f2:	0c d0       	rcall	.+24     	; 0x20c <timer0_init>
	
	ADC_init(); 
 1f4:	30 df       	rcall	.-416    	; 0x56 <ADC_init>
	
	SPI_USI_init();
 1f6:	02 d0       	rcall	.+4      	; 0x1fc <SPI_USI_init>
	
	
	sei();
 1f8:	78 94       	sei
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x14>

000001fc <SPI_USI_init>:
void SPI_USI_init(){
	//activation des ports
	//MOSI:	PB0 input
	//MISO:	PB1 output
	//SCK:	PB2 input? output selon datasheet -> marche avec: INPUT
	DDRB|=0x02; //0000 0010
 1fc:	b9 9a       	sbi	0x17, 1	; 23
	DDRB&=~0x05;//0000 0101
 1fe:	87 b3       	in	r24, 0x17	; 23
 200:	8a 7f       	andi	r24, 0xFA	; 250
 202:	87 bb       	out	0x17, r24	; 23
	
	USICR = ((1<<USIWM0)|(1<<USICS1));
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	8d b9       	out	0x0d, r24	; 13
	USICR |= (1<<USIOIE);
 208:	6e 9a       	sbi	0x0d, 6	; 13
 20a:	08 95       	ret

0000020c <timer0_init>:
#include <avr/io.h>

#include "timer0.h"

void timer0_init(){
	GTCCR|=0x00; //safe
 20c:	8c b5       	in	r24, 0x2c	; 44
 20e:	8c bd       	out	0x2c, r24	; 44
	TCCR0A=0x00;//0000--00
 210:	1a bc       	out	0x2a, r1	; 42
	TCCR0B=0x05;//00--0 101 (prescaler)
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	83 bf       	out	0x33, r24	; 51
	TIMSK|=0x02;//-XX00X1-
 216:	89 b7       	in	r24, 0x39	; 57
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	89 bf       	out	0x39, r24	; 57
 21c:	08 95       	ret

0000021e <PWM_timer1_init>:
void PWM_timer1_start(){
	GTCCR|=(0x10); //CTL1 bit set 1
}

void PWM_timer1_stop(){
	GTCCR&=(0x30); //CTL1 bit set 0
 21e:	80 b7       	in	r24, 0x30	; 48
 220:	88 68       	ori	r24, 0x88	; 136
 222:	80 bf       	out	0x30, r24	; 48
 224:	8c b5       	in	r24, 0x2c	; 44
 226:	80 64       	ori	r24, 0x40	; 64
 228:	8c bd       	out	0x2c, r24	; 44
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	8b bd       	out	0x2b, r24	; 43
 22e:	8c e9       	ldi	r24, 0x9C	; 156
 230:	8d bd       	out	0x2d, r24	; 45
 232:	08 95       	ret

00000234 <PWM_timer1_start>:
 234:	8c b5       	in	r24, 0x2c	; 44
 236:	80 61       	ori	r24, 0x10	; 16
 238:	8c bd       	out	0x2c, r24	; 44
 23a:	08 95       	ret

0000023c <PWM_timer1_set>:
}

void PWM_timer1_set(uint8_t ocr){
	OCR1B=ocr;
 23c:	8b bd       	out	0x2b, r24	; 43
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
