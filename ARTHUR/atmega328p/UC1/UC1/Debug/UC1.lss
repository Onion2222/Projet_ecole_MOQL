
UC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a3  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  00001503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a7  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <timer0_init>:

void timer0_init(uint8_t varOCR0A){
	//init timer interrupt pour led debug
	//timer 0 (8 bits ""malheureusement"")
	//se referer au datasheet atmel
	TCCR0A=0x00; //00 00 -- 00
  96:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x05; //0 0 -- 0 101 (/1024 prescaler)
  98:	95 e0       	ldi	r25, 0x05	; 5
  9a:	95 bd       	out	0x25, r25	; 37
	TCNT0=0; // (init) ?
  9c:	16 bc       	out	0x26, r1	; 38
	OCR0A=varOCR0A; //valeur à comparer avec TCNT0 pour générer inter
  9e:	87 bd       	out	0x27, r24	; 39
	TIMSK0=0x02; //----- 010 gestion de l'interruption generé par timer0 (3 interuptions possibles => x1x = COMPA (OCR0A)
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  a6:	08 95       	ret

000000a8 <USART0_init>:



void USART0_init(uint16_t ubrr){
	//voir tableau excel pour calcul BAUD
	UBRR0H = (uint8_t)(ubrr>>8);
  a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)ubrr;
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = 0x98;//1 0 0 1 1 0? 0? 0?
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0x06;//00 00 0 1 1 0
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  bc:	08 95       	ret

000000be <USART0_sendByte>:
}

void USART0_sendByte(unsigned char data){
	while (!( UCSR0A & (1<<UDRE0))); //attendre que le buffer se libere
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART0_sendByte+0x4>
	UDR0=data; //envoie
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  cc:	08 95       	ret

000000ce <USART0_sendString>:
}

void USART0_sendString(char* data){
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
	uint8_t i=0;
	while ((i<255) & (data[i]!=0))
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	b1 f0       	breq	.+44     	; 0x10e <USART0_sendString+0x40>
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d1 e0       	ldi	r29, 0x01	; 1
  e6:	f1 2c       	mov	r15, r1
	{
		USART0_sendByte(data[i]); //envoie
  e8:	0e 94 5f 00 	call	0xbe	; 0xbe <USART0_sendByte>
		i++;
  ec:	cf 5f       	subi	r28, 0xFF	; 255
	UDR0=data; //envoie
}

void USART0_sendString(char* data){
	uint8_t i=0;
	while ((i<255) & (data[i]!=0))
  ee:	f8 01       	movw	r30, r16
  f0:	ec 0f       	add	r30, r28
  f2:	f1 1d       	adc	r31, r1
  f4:	80 81       	ld	r24, Z
  f6:	9d 2f       	mov	r25, r29
  f8:	cf 3f       	cpi	r28, 0xFF	; 255
  fa:	09 f4       	brne	.+2      	; 0xfe <USART0_sendString+0x30>
  fc:	9f 2d       	mov	r25, r15
  fe:	99 23       	and	r25, r25
 100:	31 f0       	breq	.+12     	; 0x10e <USART0_sendString+0x40>
 102:	9d 2f       	mov	r25, r29
 104:	81 11       	cpse	r24, r1
 106:	01 c0       	rjmp	.+2      	; 0x10a <USART0_sendString+0x3c>
 108:	9f 2d       	mov	r25, r15
 10a:	91 11       	cpse	r25, r1
 10c:	ed cf       	rjmp	.-38     	; 0xe8 <USART0_sendString+0x1a>
	{
		USART0_sendByte(data[i]); //envoie
		i++;
	}
	USART0_sendByte(13); //CR
 10e:	8d e0       	ldi	r24, 0x0D	; 13
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <USART0_sendByte>
	USART0_sendByte(10); //LF
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	0e 94 5f 00 	call	0xbe	; 0xbe <USART0_sendByte>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	08 95       	ret

00000126 <__vector_14>:
volatile uint16_t var_clk=1;
volatile uint8_t heartbeat=1;



ISR (TIMER0_COMPA_vect){	
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(++var_clk>=80){//execution toutes les secondes
 148:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <var_clk>
 14c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <var_clk+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <var_clk+0x1>
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <var_clk>
 15a:	80 35       	cpi	r24, 0x50	; 80
 15c:	91 05       	cpc	r25, r1
 15e:	78 f0       	brcs	.+30     	; 0x17e <__vector_14+0x58>
		if(heartbeat==1){
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <__vector_14+0x58>
			PORTC^=DEBUG_LED; //clignotement de la LED de debug	
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	88 b9       	out	0x08, r24	; 8
			USART0_sendByte('*'); //envoie d'un heartbeat à l'UART	
 170:	8a e2       	ldi	r24, 0x2A	; 42
 172:	0e 94 5f 00 	call	0xbe	; 0xbe <USART0_sendByte>
			var_clk=0;
 176:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <var_clk+0x1>
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <var_clk>
		}
	}
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_18>:

ISR(USART_RX_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	unsigned char ByteLu=UDR0;
 1c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/*//repeteur
	USART0_send('>');
	USART0_sendByte(ByteLu);
	*/
	switch (ByteLu)
 1c6:	83 37       	cpi	r24, 0x73	; 115
 1c8:	a1 f4       	brne	.+40     	; 0x1f2 <__vector_18+0x52>
	{
	case 's':
		if(heartbeat==1){
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	49 f4       	brne	.+18     	; 0x1e4 <__vector_18+0x44>
			USART0_sendString("Arret heartbeat");
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 67 00 	call	0xce	; 0xce <USART0_sendString>
			heartbeat=0;
 1da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			PORTC&=!DEBUG_LED;
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	18 b8       	out	0x08, r1	; 8
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__vector_18+0x52>
		}else{
			USART0_sendString("Lancement heartbeat");
 1e4:	83 e1       	ldi	r24, 0x13	; 19
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 67 00 	call	0xce	; 0xce <USART0_sendString>
			heartbeat=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		break;		
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <main>:


int main(void)
{
	//Init port C:
	DDRC = DEBUG_LED; //definition de la direction des pins du poirt C
 214:	80 e2       	ldi	r24, 0x20	; 32
 216:	87 b9       	out	0x07, r24	; 7
	PORTC = DEBUG_LED; //extinction/allumage des ports C
 218:	88 b9       	out	0x08, r24	; 8
	
	//init interrupt
	sei(); //activation interruptions global
 21a:	78 94       	sei
	timer0_init(195); //init du timer
 21c:	83 ec       	ldi	r24, 0xC3	; 195
 21e:	0e 94 4b 00 	call	0x96	; 0x96 <timer0_init>
	USART0_init(103); //init UART à 9600 Baud
 222:	87 e6       	ldi	r24, 0x67	; 103
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 54 00 	call	0xa8	; 0xa8 <USART0_init>
	
	USART0_sendString("Demarrage du robot");
 22a:	87 e2       	ldi	r24, 0x27	; 39
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 67 00 	call	0xce	; 0xce <USART0_sendString>
 232:	ff cf       	rjmp	.-2      	; 0x232 <main+0x1e>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
