
UC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000584  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800168  00800168  00000680  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef5  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094a  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a9  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000602  00000000  00000000  0000310d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000370f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_14>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_18>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	40 02       	muls	r20, r16
  6a:	8a 02       	muls	r24, r26
  6c:	65 02       	muls	r22, r21
  6e:	8a 02       	muls	r24, r26
  70:	8a 02       	muls	r24, r26
  72:	8a 02       	muls	r24, r26
  74:	8a 02       	muls	r24, r26
  76:	8a 02       	muls	r24, r26
  78:	8a 02       	muls	r24, r26
  7a:	8a 02       	muls	r24, r26
  7c:	8a 02       	muls	r24, r26
  7e:	8a 02       	muls	r24, r26
  80:	8a 02       	muls	r24, r26
  82:	8a 02       	muls	r24, r26
  84:	8a 02       	muls	r24, r26
  86:	8a 02       	muls	r24, r26
  88:	8a 02       	muls	r24, r26
  8a:	8a 02       	muls	r24, r26
  8c:	8a 02       	muls	r24, r26
  8e:	8a 02       	muls	r24, r26
  90:	8a 02       	muls	r24, r26
  92:	8a 02       	muls	r24, r26
  94:	8a 02       	muls	r24, r26
  96:	8a 02       	muls	r24, r26
  98:	8a 02       	muls	r24, r26
  9a:	8a 02       	muls	r24, r26
  9c:	8a 02       	muls	r24, r26
  9e:	8a 02       	muls	r24, r26
  a0:	8a 02       	muls	r24, r26
  a2:	8a 02       	muls	r24, r26
  a4:	8a 02       	muls	r24, r26
  a6:	8a 02       	muls	r24, r26
  a8:	8a 02       	muls	r24, r26
  aa:	8a 02       	muls	r24, r26
  ac:	8a 02       	muls	r24, r26
  ae:	8a 02       	muls	r24, r26
  b0:	8a 02       	muls	r24, r26
  b2:	8a 02       	muls	r24, r26
  b4:	8a 02       	muls	r24, r26
  b6:	8a 02       	muls	r24, r26
  b8:	8a 02       	muls	r24, r26
  ba:	8a 02       	muls	r24, r26
  bc:	8a 02       	muls	r24, r26
  be:	8a 02       	muls	r24, r26
  c0:	8a 02       	muls	r24, r26
  c2:	8a 02       	muls	r24, r26
  c4:	8a 02       	muls	r24, r26
  c6:	8a 02       	muls	r24, r26
  c8:	8a 02       	muls	r24, r26
  ca:	8a 02       	muls	r24, r26
  cc:	8a 02       	muls	r24, r26
  ce:	8a 02       	muls	r24, r26
  d0:	8a 02       	muls	r24, r26
  d2:	8a 02       	muls	r24, r26
  d4:	0b 02       	muls	r16, r27
  d6:	8a 02       	muls	r24, r26
  d8:	8a 02       	muls	r24, r26
  da:	32 02       	muls	r19, r18
  dc:	1f 02       	muls	r17, r31
  de:	8a 02       	muls	r24, r26
  e0:	8a 02       	muls	r24, r26
  e2:	8a 02       	muls	r24, r26
  e4:	8a 02       	muls	r24, r26
  e6:	8a 02       	muls	r24, r26
  e8:	8a 02       	muls	r24, r26
  ea:	8a 02       	muls	r24, r26
  ec:	8a 02       	muls	r24, r26
  ee:	8a 02       	muls	r24, r26
  f0:	8a 02       	muls	r24, r26
  f2:	8a 02       	muls	r24, r26
  f4:	2b 02       	muls	r18, r27
  f6:	8a 02       	muls	r24, r26
  f8:	39 02       	muls	r19, r25
  fa:	8a 02       	muls	r24, r26
  fc:	8a 02       	muls	r24, r26
  fe:	8a 02       	muls	r24, r26
 100:	8a 02       	muls	r24, r26
 102:	8a 02       	muls	r24, r26
 104:	8a 02       	muls	r24, r26
 106:	24 02       	muls	r18, r20

00000108 <__ctors_end>:
 108:	11 24       	eor	r1, r1
 10a:	1f be       	out	0x3f, r1	; 63
 10c:	cf ef       	ldi	r28, 0xFF	; 255
 10e:	d8 e0       	ldi	r29, 0x08	; 8
 110:	de bf       	out	0x3e, r29	; 62
 112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
 114:	11 e0       	ldi	r17, 0x01	; 1
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b1 e0       	ldi	r27, 0x01	; 1
 11a:	e4 e8       	ldi	r30, 0x84	; 132
 11c:	f5 e0       	ldi	r31, 0x05	; 5
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
 120:	05 90       	lpm	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	a8 36       	cpi	r26, 0x68	; 104
 126:	b1 07       	cpc	r27, r17
 128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	a8 e6       	ldi	r26, 0x68	; 104
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
 132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
 134:	aa 36       	cpi	r26, 0x6A	; 106
 136:	b2 07       	cpc	r27, r18
 138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
 13a:	0e 94 a6 02 	call	0x54c	; 0x54c <main>
 13e:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <moteur_init>:

/*
  Initialise les pins definissant le sens du moteur
*/
void moteur_init(){
	DDRB|=0x01;//
 146:	20 9a       	sbi	0x04, 0	; 4
	DDRD|=0x80;//
 148:	57 9a       	sbi	0x0a, 7	; 10
	Gavance; //init sense
 14a:	5f 9a       	sbi	0x0b, 7	; 11
	Davance; //init sense
 14c:	28 9a       	sbi	0x05, 0	; 5
 14e:	08 95       	ret

00000150 <stop>:
/*
Baisse le rapport cyclique à 0%
!! N'arrete pas le PWM => utiliser PWM_stop();
*/
void stop(){
	commutTourne=0;
 150:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <commutTourne>
	commutAvance=0;
 154:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
	//roue G osef
	Gavance;
 158:	5f 9a       	sbi	0x0b, 7	; 11
	//roue D osef
	Davance;
 15a:	28 9a       	sbi	0x05, 0	; 5
	PWM_setA(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
	PWM_setB(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
 16c:	08 95       	ret

0000016e <avancer_toggle>:
 param: vitesse (10bits)
 vitesse du robot
 1: si avance/recule deja STOP
 2: sinon avancer
*/
void avancer_toggle(uint16_t vitesse){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	if(commutAvance){
 174:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <avancer_toggle+0x14>
		stop();
 17c:	0e 94 a8 00 	call	0x150	; 0x150 <stop>
 180:	0b c0       	rjmp	.+22     	; 0x198 <avancer_toggle+0x2a>
	}else{
		commutAvance=1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
		//roue G avancer
		Gavance;
 188:	5f 9a       	sbi	0x0b, 7	; 11
		//roue D avancer
		Davance;
 18a:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		PWM_setB(vitesse);
 192:	ce 01       	movw	r24, r28
 194:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <reculer_toggle>:
 param: vitesse (10bits)
 vitesse du robot
 1: si avance/recule deja STOP
 2: sinon reculer
*/
void reculer_toggle(uint16_t vitesse){
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
	if(commutAvance){
 1a4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 1a8:	88 23       	and	r24, r24
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <reculer_toggle+0x14>
		stop();
 1ac:	0e 94 a8 00 	call	0x150	; 0x150 <stop>
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <reculer_toggle+0x2a>
	}else{
		commutAvance=1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
		//roue G reculer
		Grecule;
 1b8:	5f 98       	cbi	0x0b, 7	; 11
		//roue D reculer
		Drecule;
 1ba:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		PWM_setB(vitesse);
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <tournerGauche_toggle>:
Fonctionnement du toogle
1: si tourne deja (dans un sens ou dans l'autre) STOP
2: sinon tourner à gauche
param: vitesse (10bits)
*/
void tournerGauche_toggle(uint16_t vitesse){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
	if (commutTourne){ //si tourne deja
 1d4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <commutTourne>
 1d8:	88 23       	and	r24, r24
 1da:	19 f0       	breq	.+6      	; 0x1e2 <tournerGauche_toggle+0x14>
		stop();
 1dc:	0e 94 a8 00 	call	0x150	; 0x150 <stop>
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <tournerGauche_toggle+0x2a>
	}else{
		commutTourne=1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <commutTourne>
		//tourne
		//roue G reculer
		Grecule;
 1e8:	5f 98       	cbi	0x0b, 7	; 11
		//roue D avancer
		Davance;
 1ea:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		PWM_setB(vitesse);
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
	}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <tournerDroite_toggle>:
Fonctionnement du toogle
1: si tourne deja (dans un sens ou dans l'autre) STOP
2: sinon tourner à droite
param: vitesse (10bits)
*/
void tournerDroite_toggle(uint16_t vitesse){
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
	if (commutTourne){ //si tourne deja
 204:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <commutTourne>
 208:	88 23       	and	r24, r24
 20a:	19 f0       	breq	.+6      	; 0x212 <tournerDroite_toggle+0x14>
		stop();
 20c:	0e 94 a8 00 	call	0x150	; 0x150 <stop>
 210:	0b c0       	rjmp	.+22     	; 0x228 <tournerDroite_toggle+0x2a>
	}else{
		commutTourne=1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <commutTourne>
		//roue G avancer
		Gavance;
 218:	5f 9a       	sbi	0x0b, 7	; 11
		//roue D reculer
		Drecule;
 21a:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		PWM_setB(vitesse);
 222:	ce 01       	movw	r24, r28
 224:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
	}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <PWM_init>:


//PWM sur PB1 et PB2
void PWM_init(){
	//PIN en output PB1 et PB2
	DDRB |= 0x06; //0000 0110
 22e:	84 b1       	in	r24, 0x04	; 4
 230:	86 60       	ori	r24, 0x06	; 6
 232:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(0x06); //0000 0110 mise à 0L des ports
 234:	85 b1       	in	r24, 0x05	; 5
 236:	89 7f       	andi	r24, 0xF9	; 249
 238:	85 b9       	out	0x05, r24	; 5
	//TCCR1A
	// aa bb // ??
	//aa//bb: 00 -> pas de PWM
	//		: 11/10 -> PWM
	//
	TCCR1A=0x03; // ^^ ^^ -- 11(mode10bits) => ici 0000 0011=0x03 POUR fonctionnement 1010 0011=0xA3
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0x09; // 00(osef) - 01(mode10bits) 001(prescal) => ici 0000 1001
 240:	89 e0       	ldi	r24, 0x09	; 9
 242:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 246:	08 95       	ret

00000248 <PWM_getA>:
	OCR1BH=(uint8_t)(OCR>>8);
	OCR1BL=(uint8_t)OCR;
}

uint16_t PWM_getA(){
	return OCR1AL + (OCR1AH<<8);
 248:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 24c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	98 2f       	mov	r25, r24
 254:	88 27       	eor	r24, r24
}
 256:	82 0f       	add	r24, r18
 258:	91 1d       	adc	r25, r1
 25a:	08 95       	ret

0000025c <PWM_getB>:

uint16_t PWM_getB(){
	return OCR1BL + (OCR1BH<<8);
 25c:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 260:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	98 2f       	mov	r25, r24
 268:	88 27       	eor	r24, r24
}
 26a:	82 0f       	add	r24, r18
 26c:	91 1d       	adc	r25, r1
 26e:	08 95       	ret

00000270 <PWM_start>:


void PWM_start(){
	TCCR1A|=0xA0;
 270:	e0 e8       	ldi	r30, 0x80	; 128
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 6a       	ori	r24, 0xA0	; 160
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <PWM_stop>:
}
void PWM_stop(){
	TCCR1A&=0x0F;
 27c:	e0 e8       	ldi	r30, 0x80	; 128
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <PWM_setA>:
	TCCR1B=0x09; // 00(osef) - 01(mode10bits) 001(prescal) => ici 0000 1001
	//tester 00 00 (mode) !
	
}

void PWM_setA(uint16_t OCR){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
	if(OCR==0) PWM_stop(); //etrangement, il reste un petit "sursaut" de PWM à 0
 28e:	89 2b       	or	r24, r25
 290:	19 f4       	brne	.+6      	; 0x298 <PWM_setA+0x10>
 292:	0e 94 3e 01 	call	0x27c	; 0x27c <PWM_stop>
 296:	02 c0       	rjmp	.+4      	; 0x29c <PWM_setA+0x14>
	else PWM_start();
 298:	0e 94 38 01 	call	0x270	; 0x270 <PWM_start>
	OCR1AH=(uint8_t)(OCR>>8);
 29c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL=(uint8_t)OCR;
 2a0:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <PWM_setB>:

void PWM_setB(uint16_t OCR){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	if(OCR==0) PWM_stop(); //etrangement, il reste un petit "sursaut" de PWM à 0
 2b0:	89 2b       	or	r24, r25
 2b2:	19 f4       	brne	.+6      	; 0x2ba <PWM_setB+0x10>
 2b4:	0e 94 3e 01 	call	0x27c	; 0x27c <PWM_stop>
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <PWM_setB+0x14>
	else PWM_start();
 2ba:	0e 94 38 01 	call	0x270	; 0x270 <PWM_start>
	OCR1BH=(uint8_t)(OCR>>8);
 2be:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	OCR1BL=(uint8_t)OCR;
 2c2:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <timer0_init>:
 2cc:	14 bc       	out	0x24, r1	; 36
 2ce:	95 e0       	ldi	r25, 0x05	; 5
 2d0:	95 bd       	out	0x25, r25	; 37
 2d2:	16 bc       	out	0x26, r1	; 38
 2d4:	87 bd       	out	0x27, r24	; 39
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 2dc:	08 95       	ret

000002de <USART0_init>:
 2de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2e6:	88 e9       	ldi	r24, 0x98	; 152
 2e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2f2:	08 95       	ret

000002f4 <USART0_sendByte>:
 2f4:	e0 ec       	ldi	r30, 0xC0	; 192
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	90 81       	ld	r25, Z
 2fa:	95 ff       	sbrs	r25, 5
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <USART0_sendByte+0x4>
 2fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 302:	08 95       	ret

00000304 <USART0_sendString>:
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	8c 01       	movw	r16, r24
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	88 23       	and	r24, r24
 316:	b1 f0       	breq	.+44     	; 0x344 <USART0_sendString+0x40>
 318:	c0 e0       	ldi	r28, 0x00	; 0
 31a:	d1 e0       	ldi	r29, 0x01	; 1
 31c:	f1 2c       	mov	r15, r1
 31e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
 322:	cf 5f       	subi	r28, 0xFF	; 255
 324:	f8 01       	movw	r30, r16
 326:	ec 0f       	add	r30, r28
 328:	f1 1d       	adc	r31, r1
 32a:	80 81       	ld	r24, Z
 32c:	9d 2f       	mov	r25, r29
 32e:	cf 3f       	cpi	r28, 0xFF	; 255
 330:	09 f4       	brne	.+2      	; 0x334 <USART0_sendString+0x30>
 332:	9f 2d       	mov	r25, r15
 334:	99 23       	and	r25, r25
 336:	31 f0       	breq	.+12     	; 0x344 <USART0_sendString+0x40>
 338:	9d 2f       	mov	r25, r29
 33a:	81 11       	cpse	r24, r1
 33c:	01 c0       	rjmp	.+2      	; 0x340 <USART0_sendString+0x3c>
 33e:	9f 2d       	mov	r25, r15
 340:	91 11       	cpse	r25, r1
 342:	ed cf       	rjmp	.-38     	; 0x31e <USART0_sendString+0x1a>
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	08 95       	ret

0000035c <__vector_14>:
volatile uint16_t vitesse=800;




ISR (TIMER0_COMPA_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	if(++var_clk>=80){//execution toutes les secondes
 37e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <var_clk>
 382:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <var_clk+0x1>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <var_clk+0x1>
 38c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <var_clk>
 390:	80 35       	cpi	r24, 0x50	; 80
 392:	91 05       	cpc	r25, r1
 394:	78 f0       	brcs	.+30     	; 0x3b4 <__vector_14+0x58>
		if(heartbeat==1){
 396:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	59 f4       	brne	.+22     	; 0x3b4 <__vector_14+0x58>
			PORTC^=DEBUG_LED; //clignotement de la LED de debug
 39e:	98 b1       	in	r25, 0x08	; 8
 3a0:	80 e2       	ldi	r24, 0x20	; 32
 3a2:	89 27       	eor	r24, r25
 3a4:	88 b9       	out	0x08, r24	; 8
			USART0_sendByte('*'); //envoie d'un heartbeat à l'UART
 3a6:	8a e2       	ldi	r24, 0x2A	; 42
 3a8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
			var_clk=0;
 3ac:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <var_clk+0x1>
 3b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <var_clk>
		}
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_18>:


/*
Interruption reception UART
*/
ISR(USART_RX_vect){
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	cf 93       	push	r28
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	
	//petit truc con: UDR0 sert de buffer reception ET envoie
	unsigned char ByteLu=UDR0; //enregistrement de la valeur lu
 3fa:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	z/s -> si avance/recule deja arret du robot
	z|s puis q|d -> avance/recule puis tourne
	q|d puis z|s -> tourne puis avance/recule

	*/
	switch (ByteLu)
 3fe:	8c 2f       	mov	r24, r28
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	bb 97       	sbiw	r30, 0x2b	; 43
 406:	e0 35       	cpi	r30, 0x50	; 80
 408:	f1 05       	cpc	r31, r1
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	83 c0       	rjmp	.+262    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 40e:	ec 5c       	subi	r30, 0xCC	; 204
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	0c 94 ba 02 	jmp	0x574	; 0x574 <__tablejump2__>
	{

		case 'a': //commutation heartbeat
		if(heartbeat==1){
 416:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	41 f4       	brne	.+16     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			USART0_sendString("Arret heartbeat");
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendString>
			heartbeat=0;
 426:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartbeat>
			PORTC &= ~DEBUG_LED;
 42a:	45 98       	cbi	0x08, 5	; 8
 42c:	7d c0       	rjmp	.+250    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			}else{
			USART0_sendString("Lancement heartbeat");
 42e:	85 e1       	ldi	r24, 0x15	; 21
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendString>
			heartbeat=1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartbeat>
 43c:	75 c0       	rjmp	.+234    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		break;
		

		case 'e':
		//diagnostique
		USART0_sendString("Debut diagnostique");
 43e:	89 e2       	ldi	r24, 0x29	; 41
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendString>

		//Capteur IR

		//niveau batterie
		
		break;
 446:	70 c0       	rjmp	.+224    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>

		case 'z': //avance
		avancer_toggle(vitesse);
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 450:	0e 94 b7 00 	call	0x16e	; 0x16e <avancer_toggle>
		break;
 454:	69 c0       	rjmp	.+210    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>

		case 'q': //gauche
		tournerGauche_toggle(vitesse);
 456:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 45a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 45e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <tournerGauche_toggle>
		break;
 462:	62 c0       	rjmp	.+196    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>

		case 'd': //droite
		tournerDroite_toggle(vitesse);
 464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 468:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 46c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <tournerDroite_toggle>
		break;
 470:	5b c0       	rjmp	.+182    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>

		case 's': //recule
		reculer_toggle(vitesse);
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 476:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 47a:	0e 94 cf 00 	call	0x19e	; 0x19e <reculer_toggle>
		break;
 47e:	54 c0       	rjmp	.+168    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		
		case '+':
		if(vitesse<1023) vitesse++; //pourquoi 1023 ? 3FF(10bits) voir init PWM
 480:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 484:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 488:	8f 3f       	cpi	r24, 0xFF	; 255
 48a:	93 40       	sbci	r25, 0x03	; 3
 48c:	48 f4       	brcc	.+18     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 48e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 492:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 49c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if(PWM_getA()>0) PWM_setA(vitesse);
 4a0:	0e 94 24 01 	call	0x248	; 0x248 <PWM_getA>
 4a4:	89 2b       	or	r24, r25
 4a6:	31 f0       	breq	.+12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4b0:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		if(PWM_getB()>0) PWM_setB(vitesse);
 4b4:	0e 94 2e 01 	call	0x25c	; 0x25c <PWM_getB>
 4b8:	89 2b       	or	r24, r25
 4ba:	b1 f1       	breq	.+108    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4c4:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
 4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		break;
		
		case '-':
		if(vitesse>150) vitesse--;
 4ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4d2:	87 39       	cpi	r24, 0x97	; 151
 4d4:	91 05       	cpc	r25, r1
 4d6:	48 f0       	brcs	.+18     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if(PWM_getA()>0) PWM_setA(vitesse);
 4ea:	0e 94 24 01 	call	0x248	; 0x248 <PWM_getA>
 4ee:	89 2b       	or	r24, r25
 4f0:	31 f0       	breq	.+12     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4fa:	0e 94 44 01 	call	0x288	; 0x288 <PWM_setA>
		if(PWM_getB()>0) PWM_setB(vitesse);
 4fe:	0e 94 2e 01 	call	0x25c	; 0x25c <PWM_getB>
 502:	89 2b       	or	r24, r25
 504:	89 f0       	breq	.+34     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 506:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 50a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 50e:	0e 94 55 01 	call	0x2aa	; 0x2aa <PWM_setB>
 512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		break;

		default:
		USART0_sendByte('>');
 514:	8e e3       	ldi	r24, 0x3E	; 62
 516:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
		USART0_sendByte(ByteLu);
 51a:	8c 2f       	mov	r24, r28
 51c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART0_sendByte>
		USART0_sendString(" => Commande inconnue !");
 520:	8c e3       	ldi	r24, 0x3C	; 60
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendString>
		break;

	}
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	cf 91       	pop	r28
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <main>:


int main(void)
{
	//Init port C:
	DDRC = DEBUG_LED; //definition de la direction des pins du poirt C
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	87 b9       	out	0x07, r24	; 7
	PORTC = DEBUG_LED; //extinction/allumage des ports C
 550:	88 b9       	out	0x08, r24	; 8
	
	//init interrupt
	sei(); //activation interruptions global
 552:	78 94       	sei
	timer0_init(195); //init du timer
 554:	83 ec       	ldi	r24, 0xC3	; 195
 556:	0e 94 66 01 	call	0x2cc	; 0x2cc <timer0_init>
	USART0_init(103); //init UART à 9600 Baud
 55a:	87 e6       	ldi	r24, 0x67	; 103
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 6f 01 	call	0x2de	; 0x2de <USART0_init>
	PWM_init(); //init PWM sur timer1
 562:	0e 94 17 01 	call	0x22e	; 0x22e <PWM_init>
	
	USART0_sendString("Demarrage du robot");
 566:	84 e5       	ldi	r24, 0x54	; 84
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendString>

	
	//PWM_start();
	moteur_init();
 56e:	0e 94 a3 00 	call	0x146	; 0x146 <moteur_init>
 572:	ff cf       	rjmp	.-2      	; 0x572 <main+0x26>

00000574 <__tablejump2__>:
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	05 90       	lpm	r0, Z+
 57a:	f4 91       	lpm	r31, Z
 57c:	e0 2d       	mov	r30, r0
 57e:	09 94       	ijmp

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
