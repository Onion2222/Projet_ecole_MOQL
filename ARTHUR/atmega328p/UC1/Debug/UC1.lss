
UC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000005ea  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800172  00800172  000006f0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109c  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d5  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f8  00000000  00000000  00002349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000663  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_14>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_18>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	5c 02       	muls	r21, r28
  6a:	b9 02       	muls	r27, r25
  6c:	82 02       	muls	r24, r18
  6e:	b9 02       	muls	r27, r25
  70:	b9 02       	muls	r27, r25
  72:	b9 02       	muls	r27, r25
  74:	b9 02       	muls	r27, r25
  76:	b9 02       	muls	r27, r25
  78:	b9 02       	muls	r27, r25
  7a:	b9 02       	muls	r27, r25
  7c:	b9 02       	muls	r27, r25
  7e:	b9 02       	muls	r27, r25
  80:	b9 02       	muls	r27, r25
  82:	b9 02       	muls	r27, r25
  84:	b9 02       	muls	r27, r25
  86:	b9 02       	muls	r27, r25
  88:	b9 02       	muls	r27, r25
  8a:	b9 02       	muls	r27, r25
  8c:	b9 02       	muls	r27, r25
  8e:	b9 02       	muls	r27, r25
  90:	b9 02       	muls	r27, r25
  92:	b9 02       	muls	r27, r25
  94:	b9 02       	muls	r27, r25
  96:	b9 02       	muls	r27, r25
  98:	b9 02       	muls	r27, r25
  9a:	b9 02       	muls	r27, r25
  9c:	b9 02       	muls	r27, r25
  9e:	b9 02       	muls	r27, r25
  a0:	b9 02       	muls	r27, r25
  a2:	b9 02       	muls	r27, r25
  a4:	b9 02       	muls	r27, r25
  a6:	b9 02       	muls	r27, r25
  a8:	b9 02       	muls	r27, r25
  aa:	b9 02       	muls	r27, r25
  ac:	b9 02       	muls	r27, r25
  ae:	b9 02       	muls	r27, r25
  b0:	b9 02       	muls	r27, r25
  b2:	b9 02       	muls	r27, r25
  b4:	b9 02       	muls	r27, r25
  b6:	b9 02       	muls	r27, r25
  b8:	b9 02       	muls	r27, r25
  ba:	b9 02       	muls	r27, r25
  bc:	b9 02       	muls	r27, r25
  be:	b9 02       	muls	r27, r25
  c0:	b9 02       	muls	r27, r25
  c2:	b9 02       	muls	r27, r25
  c4:	b9 02       	muls	r27, r25
  c6:	b9 02       	muls	r27, r25
  c8:	b9 02       	muls	r27, r25
  ca:	b9 02       	muls	r27, r25
  cc:	b9 02       	muls	r27, r25
  ce:	b9 02       	muls	r27, r25
  d0:	b9 02       	muls	r27, r25
  d2:	b9 02       	muls	r27, r25
  d4:	27 02       	muls	r18, r23
  d6:	b9 02       	muls	r27, r25
  d8:	b9 02       	muls	r27, r25
  da:	4e 02       	muls	r20, r30
  dc:	3b 02       	muls	r19, r27
  de:	b9 02       	muls	r27, r25
  e0:	b9 02       	muls	r27, r25
  e2:	b9 02       	muls	r27, r25
  e4:	b9 02       	muls	r27, r25
  e6:	b9 02       	muls	r27, r25
  e8:	b9 02       	muls	r27, r25
  ea:	b5 02       	muls	r27, r21
  ec:	ae 02       	muls	r26, r30
  ee:	b9 02       	muls	r27, r25
  f0:	b9 02       	muls	r27, r25
  f2:	a7 02       	muls	r26, r23
  f4:	47 02       	muls	r20, r23
  f6:	b9 02       	muls	r27, r25
  f8:	55 02       	muls	r21, r21
  fa:	b9 02       	muls	r27, r25
  fc:	b9 02       	muls	r27, r25
  fe:	b9 02       	muls	r27, r25
 100:	b9 02       	muls	r27, r25
 102:	b9 02       	muls	r27, r25
 104:	b9 02       	muls	r27, r25
 106:	40 02       	muls	r20, r16

00000108 <__ctors_end>:
 108:	11 24       	eor	r1, r1
 10a:	1f be       	out	0x3f, r1	; 63
 10c:	cf ef       	ldi	r28, 0xFF	; 255
 10e:	d8 e0       	ldi	r29, 0x08	; 8
 110:	de bf       	out	0x3e, r29	; 62
 112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
 114:	11 e0       	ldi	r17, 0x01	; 1
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b1 e0       	ldi	r27, 0x01	; 1
 11a:	ea ee       	ldi	r30, 0xEA	; 234
 11c:	f5 e0       	ldi	r31, 0x05	; 5
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
 120:	05 90       	lpm	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	a2 37       	cpi	r26, 0x72	; 114
 126:	b1 07       	cpc	r27, r17
 128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	a2 e7       	ldi	r26, 0x72	; 114
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
 132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
 134:	a4 37       	cpi	r26, 0x74	; 116
 136:	b2 07       	cpc	r27, r18
 138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
 13a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
 13e:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <moteur_init>:

/*
  Initialise les pins definissant le sens du moteur
*/
void moteur_init(){
	PWM_init(); //init PWM sur timer1
 146:	0e 94 19 01 	call	0x232	; 0x232 <PWM_init>
	DDRB|=0x01;//
 14a:	20 9a       	sbi	0x04, 0	; 4
	DDRD|=0x80;//
 14c:	57 9a       	sbi	0x0a, 7	; 10
	Gavance; //init sense
 14e:	5f 9a       	sbi	0x0b, 7	; 11
	Davance; //init sense
 150:	28 9a       	sbi	0x05, 0	; 5
 152:	08 95       	ret

00000154 <stop>:
/*
Baisse le rapport cyclique à 0%
!! N'arrete pas le PWM => utiliser PWM_stop();
*/
void stop(){
	commutTourne=0;
 154:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <commutTourne>
	commutAvance=0;
 158:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
	//roue G osef
	Gavance;
 15c:	5f 9a       	sbi	0x0b, 7	; 11
	//roue D osef
	Davance;
 15e:	28 9a       	sbi	0x05, 0	; 5
	PWM_setA(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
	PWM_setB(0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 170:	08 95       	ret

00000172 <avancer_toggle>:
 param: vitesse (10bits)
 vitesse du robot
 1: si avance/recule deja STOP
 2: sinon avancer
*/
void avancer_toggle(uint16_t vitesse){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	if(commutAvance){
 178:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 17c:	88 23       	and	r24, r24
 17e:	19 f0       	breq	.+6      	; 0x186 <avancer_toggle+0x14>
		stop();
 180:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 184:	0b c0       	rjmp	.+22     	; 0x19c <avancer_toggle+0x2a>
	}else{
		commutAvance=1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
		//roue G avancer
		Gavance;
 18c:	5f 9a       	sbi	0x0b, 7	; 11
		//roue D avancer
		Davance;
 18e:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);
 190:	ce 01       	movw	r24, r28
 192:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);
 196:	ce 01       	movw	r24, r28
 198:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <reculer_toggle>:
 param: vitesse (10bits)
 vitesse du robot
 1: si avance/recule deja STOP
 2: sinon reculer
*/
void reculer_toggle(uint16_t vitesse){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
	if(commutAvance){
 1a8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 1ac:	88 23       	and	r24, r24
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <reculer_toggle+0x14>
		stop();
 1b0:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <reculer_toggle+0x2a>
	}else{
		commutAvance=1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
		//roue G reculer
		Grecule;
 1bc:	5f 98       	cbi	0x0b, 7	; 11
		//roue D reculer
		Drecule;
 1be:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <tournerGauche_toggle>:
Fonctionnement du toogle
1: si tourne deja (dans un sens ou dans l'autre) STOP
2: sinon tourner à gauche
param: vitesse (10bits)
*/
void tournerGauche_toggle(uint16_t vitesse){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	if (commutTourne){ //si tourne deja
 1d8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <commutTourne>
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <tournerGauche_toggle+0x14>
		stop();
 1e0:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <tournerGauche_toggle+0x2a>
	}else{
		commutTourne=1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <commutTourne>
		//tourne
		//roue G reculer
		Grecule;
 1ec:	5f 98       	cbi	0x0b, 7	; 11
		//roue D avancer
		Davance;
 1ee:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <tournerDroite_toggle>:
Fonctionnement du toogle
1: si tourne deja (dans un sens ou dans l'autre) STOP
2: sinon tourner à droite
param: vitesse (10bits)
*/
void tournerDroite_toggle(uint16_t vitesse){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	if (commutTourne){ //si tourne deja
 208:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <commutTourne>
 20c:	88 23       	and	r24, r24
 20e:	19 f0       	breq	.+6      	; 0x216 <tournerDroite_toggle+0x14>
		stop();
 210:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 214:	0b c0       	rjmp	.+22     	; 0x22c <tournerDroite_toggle+0x2a>
	}else{
		commutTourne=1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <commutTourne>
		//roue G avancer
		Gavance;
 21c:	5f 9a       	sbi	0x0b, 7	; 11
		//roue D reculer
		Drecule;
 21e:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);
 220:	ce 01       	movw	r24, r28
 222:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);
 226:	ce 01       	movw	r24, r28
 228:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <PWM_init>:
 232:	84 b1       	in	r24, 0x04	; 4
 234:	86 60       	ori	r24, 0x06	; 6
 236:	84 b9       	out	0x04, r24	; 4
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	89 7f       	andi	r24, 0xF9	; 249
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 24a:	08 95       	ret

0000024c <PWM_getA>:
 24c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 250:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	98 2f       	mov	r25, r24
 258:	88 27       	eor	r24, r24
 25a:	82 0f       	add	r24, r18
 25c:	91 1d       	adc	r25, r1
 25e:	08 95       	ret

00000260 <PWM_getB>:
 260:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 264:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	98 2f       	mov	r25, r24
 26c:	88 27       	eor	r24, r24
 26e:	82 0f       	add	r24, r18
 270:	91 1d       	adc	r25, r1
 272:	08 95       	ret

00000274 <PWM_start>:
 274:	e0 e8       	ldi	r30, 0x80	; 128
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 6a       	ori	r24, 0xA0	; 160
 27c:	80 83       	st	Z, r24
 27e:	08 95       	ret

00000280 <PWM_stop>:
 280:	e0 e8       	ldi	r30, 0x80	; 128
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <PWM_setA>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	89 2b       	or	r24, r25
 294:	19 f4       	brne	.+6      	; 0x29c <PWM_setA+0x10>
 296:	0e 94 40 01 	call	0x280	; 0x280 <PWM_stop>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <PWM_setA+0x14>
 29c:	0e 94 3a 01 	call	0x274	; 0x274 <PWM_start>
 2a0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2a4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <PWM_setB>:
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
 2b4:	89 2b       	or	r24, r25
 2b6:	19 f4       	brne	.+6      	; 0x2be <PWM_setB+0x10>
 2b8:	0e 94 40 01 	call	0x280	; 0x280 <PWM_stop>
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <PWM_setB+0x14>
 2be:	0e 94 3a 01 	call	0x274	; 0x274 <PWM_start>
 2c2:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 2c6:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <SPI_init>:
void SPI_init(){
	// MOSI et SCK en output le reste en input
	//MOSI:	PB3
	//SCK:	PB5
	//MISO:	PB4
	DDRB |= (1<<3)|(1<<5); //SCK MOSI output
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	88 62       	ori	r24, 0x28	; 40
 2d4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<4); //MISO input
 2d6:	24 98       	cbi	0x04, 4	; 4

	//activation du SPI en master avec prescaler de /64
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
 2d8:	82 e5       	ldi	r24, 0x52	; 82
 2da:	8c bd       	out	0x2c, r24	; 44
 2dc:	08 95       	ret

000002de <SPI_MasterEnvoie>:
}


void SPI_MasterEnvoie(unsigned char data){
	SPDR = data; //ecriture de data dans buffer d'envoie
 2de:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // attendre que la transmission se termine
 2e0:	0d b4       	in	r0, 0x2d	; 45
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <SPI_MasterEnvoie+0x2>
}
 2e6:	08 95       	ret

000002e8 <SPI_MasterEnvoieReception>:

uint8_t SPI_MasterEnvoieReception(unsigned char data){
	SPDR = data;
 2e8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
 2ea:	0d b4       	in	r0, 0x2d	; 45
 2ec:	07 fe       	sbrs	r0, 7
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <SPI_MasterEnvoieReception+0x2>

	return SPDR;
 2f0:	8e b5       	in	r24, 0x2e	; 46
 2f2:	08 95       	ret

000002f4 <timer0_init>:
 2f4:	14 bc       	out	0x24, r1	; 36
 2f6:	95 e0       	ldi	r25, 0x05	; 5
 2f8:	95 bd       	out	0x25, r25	; 37
 2fa:	16 bc       	out	0x26, r1	; 38
 2fc:	87 bd       	out	0x27, r24	; 39
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 304:	08 95       	ret

00000306 <USART0_init>:
ubrr donne le baud de la communication, se referrer au tableau excel pour plus d'informations sur son calcul
*/
void USART0_init(uint16_t ubrr){
	//voir tableau excel pour calcul BAUD
	//se referer au datasheet
	UBRR0H = (uint8_t)(ubrr>>8); //def baud 1/2
 306:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)ubrr; //def baud 2/2
 30a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = 0x98;//1 0 0 1 1 0? 0? 0?
 30e:	88 e9       	ldi	r24, 0x98	; 152
 310:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = 0x06;//00 00 0 1 1 0
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 31a:	08 95       	ret

0000031c <USART0_sendByte>:
Envoie un octet (byte) de donnée
param: data
data est la donnée à envoyer 
*/
void USART0_sendByte(unsigned char data){
	while (!( UCSR0A & (1<<UDRE0))); //attendre que le buffer se libere
 31c:	e0 ec       	ldi	r30, 0xC0	; 192
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	90 81       	ld	r25, Z
 322:	95 ff       	sbrs	r25, 5
 324:	fd cf       	rjmp	.-6      	; 0x320 <USART0_sendByte+0x4>
	UDR0=data; //envoie de data en l'inscivant dans le buffer d'envoi
 326:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 32a:	08 95       	ret

0000032c <USART0_sendString>:
Envoie un string et CR+LF (saut de ligne)
param: data
String à envoyer
(utilise USART0_senByte(...))
*/
void USART0_sendString(char* data){
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	8c 01       	movw	r16, r24
	uint8_t i=0;
	while ((i<255) & (data[i]!=0)) // tant que le string n'est pas finie (limite à 255 pour pas faire le fou)
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	b1 f0       	breq	.+44     	; 0x36c <USART0_sendString+0x40>
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d1 e0       	ldi	r29, 0x01	; 1
 344:	f1 2c       	mov	r15, r1
	{
		USART0_sendByte(data[i]); //envoie via fonction USART0_sendByte
 346:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
		i++;
 34a:	cf 5f       	subi	r28, 0xFF	; 255
String à envoyer
(utilise USART0_senByte(...))
*/
void USART0_sendString(char* data){
	uint8_t i=0;
	while ((i<255) & (data[i]!=0)) // tant que le string n'est pas finie (limite à 255 pour pas faire le fou)
 34c:	f8 01       	movw	r30, r16
 34e:	ec 0f       	add	r30, r28
 350:	f1 1d       	adc	r31, r1
 352:	80 81       	ld	r24, Z
 354:	9d 2f       	mov	r25, r29
 356:	cf 3f       	cpi	r28, 0xFF	; 255
 358:	09 f4       	brne	.+2      	; 0x35c <USART0_sendString+0x30>
 35a:	9f 2d       	mov	r25, r15
 35c:	99 23       	and	r25, r25
 35e:	31 f0       	breq	.+12     	; 0x36c <USART0_sendString+0x40>
 360:	9d 2f       	mov	r25, r29
 362:	81 11       	cpse	r24, r1
 364:	01 c0       	rjmp	.+2      	; 0x368 <USART0_sendString+0x3c>
 366:	9f 2d       	mov	r25, r15
 368:	91 11       	cpse	r25, r1
 36a:	ed cf       	rjmp	.-38     	; 0x346 <USART0_sendString+0x1a>
	{
		USART0_sendByte(data[i]); //envoie via fonction USART0_sendByte
		i++;
	}
	USART0_sendByte(13); //CR
 36c:	8d e0       	ldi	r24, 0x0D	; 13
 36e:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
	USART0_sendByte(10); //LF
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	08 95       	ret

00000384 <__vector_14>:
volatile uint16_t vitesse=800;




ISR (TIMER0_COMPA_vect){
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	if(++var_clk>=80){//execution toutes les secondes
 3a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <var_clk>
 3aa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <var_clk+0x1>
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <var_clk+0x1>
 3b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <var_clk>
 3b8:	80 35       	cpi	r24, 0x50	; 80
 3ba:	91 05       	cpc	r25, r1
 3bc:	b8 f0       	brcs	.+46     	; 0x3ec <__vector_14+0x68>
		
		if(heartbeat==1){ //heartbeat, pour savoir si toutes les composantes du systemes sont OP
 3be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	99 f4       	brne	.+38     	; 0x3ec <__vector_14+0x68>
			PORTC^=DEBUG_LED; //clignotement de la LED de debug
 3c6:	98 b1       	in	r25, 0x08	; 8
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	89 27       	eor	r24, r25
 3cc:	88 b9       	out	0x08, r24	; 8
			USART0_sendByte('*'); //envoie d'un heartbeat à l'UART
 3ce:	8a e2       	ldi	r24, 0x2A	; 42
 3d0:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
			
			//Heartbeat du salve SPI
			if(SPI_MasterEnvoieReception(0x01)==0x05){ //envoie de 0x01 (0x02 ACK)
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 3da:	85 30       	cpi	r24, 0x05	; 5
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <__vector_14+0x60>
				USART0_sendByte('^'); //envoie de '^' pour heartbeat de salve SPI
 3de:	8e e5       	ldi	r24, 0x5E	; 94
 3e0:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
			}
			
			var_clk=0;
 3e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <var_clk+0x1>
 3e8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <var_clk>
		}
		
	}
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_18>:


/*
Interruption reception UART
*/
ISR(USART_RX_vect){
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	cf 93       	push	r28
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	
	//petit truc con: UDR0 sert de buffer reception ET envoie
	unsigned char ByteLu=UDR0; //enregistrement de la valeur lu
 432:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	//analyseur syntaxique
	/*Commandes:
		voir tableau excel pour la liste des commandes

	*/
	switch (ByteLu)
 436:	8c 2f       	mov	r24, r28
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	bb 97       	sbiw	r30, 0x2b	; 43
 43e:	e0 35       	cpi	r30, 0x50	; 80
 440:	f1 05       	cpc	r31, r1
 442:	08 f0       	brcs	.+2      	; 0x446 <__vector_18+0x38>
 444:	96 c0       	rjmp	.+300    	; 0x572 <__vector_18+0x164>
 446:	ec 5c       	subi	r30, 0xCC	; 204
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__tablejump2__>
	{

		case 'a': //commutation heartbeat
		if(heartbeat==1){
 44e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	41 f4       	brne	.+16     	; 0x466 <__vector_18+0x58>
			USART0_sendString("Arret heartbeat");
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>
			heartbeat=0;
 45e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartbeat>
			PORTC &= ~DEBUG_LED;
 462:	45 98       	cbi	0x08, 5	; 8
 464:	90 c0       	rjmp	.+288    	; 0x586 <__vector_18+0x178>
			}else{
			USART0_sendString("Lancement heartbeat");
 466:	85 e1       	ldi	r24, 0x15	; 21
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>
			heartbeat=1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartbeat>
 474:	88 c0       	rjmp	.+272    	; 0x586 <__vector_18+0x178>
		break;
		

		case 'e':
		//diagnostique
		USART0_sendString("Debut diagnostique");
 476:	89 e2       	ldi	r24, 0x29	; 41
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>

		//Capteur IR

		//niveau batterie
		
		break;
 47e:	83 c0       	rjmp	.+262    	; 0x586 <__vector_18+0x178>

		case 'z': //avance
		avancer_toggle(vitesse);
 480:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 484:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 488:	0e 94 b9 00 	call	0x172	; 0x172 <avancer_toggle>
		break;
 48c:	7c c0       	rjmp	.+248    	; 0x586 <__vector_18+0x178>

		case 'q': //gauche
		tournerGauche_toggle(vitesse);
 48e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 492:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 496:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <tournerGauche_toggle>
		break;
 49a:	75 c0       	rjmp	.+234    	; 0x586 <__vector_18+0x178>

		case 'd': //droite
		tournerDroite_toggle(vitesse);
 49c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4a4:	0e 94 01 01 	call	0x202	; 0x202 <tournerDroite_toggle>
		break;
 4a8:	6e c0       	rjmp	.+220    	; 0x586 <__vector_18+0x178>

		case 's': //recule
		reculer_toggle(vitesse);
 4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <reculer_toggle>
		break;
 4b6:	67 c0       	rjmp	.+206    	; 0x586 <__vector_18+0x178>
		
		case '+':
		if(vitesse<1023) vitesse++; //pourquoi 1023 ? 3FF(10bits) voir init PWM
 4b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4c0:	8f 3f       	cpi	r24, 0xFF	; 255
 4c2:	93 40       	sbci	r25, 0x03	; 3
 4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__vector_18+0xca>
 4c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if(PWM_getA()>0) PWM_setA(vitesse);
 4d8:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_getA>
 4dc:	89 2b       	or	r24, r25
 4de:	31 f0       	breq	.+12     	; 0x4ec <__vector_18+0xde>
 4e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4e8:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		if(PWM_getB()>0) PWM_setB(vitesse);
 4ec:	0e 94 30 01 	call	0x260	; 0x260 <PWM_getB>
 4f0:	89 2b       	or	r24, r25
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <__vector_18+0xe8>
 4f4:	48 c0       	rjmp	.+144    	; 0x586 <__vector_18+0x178>
 4f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4fe:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 502:	41 c0       	rjmp	.+130    	; 0x586 <__vector_18+0x178>
		break;
		
		case '-':
		if(vitesse>150) vitesse--;
 504:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 508:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 50c:	87 39       	cpi	r24, 0x97	; 151
 50e:	91 05       	cpc	r25, r1
 510:	48 f0       	brcs	.+18     	; 0x524 <__vector_18+0x116>
 512:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 516:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 520:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if(PWM_getA()>0) PWM_setA(vitesse);
 524:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_getA>
 528:	89 2b       	or	r24, r25
 52a:	31 f0       	breq	.+12     	; 0x538 <__vector_18+0x12a>
 52c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 530:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 534:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		if(PWM_getB()>0) PWM_setB(vitesse);
 538:	0e 94 30 01 	call	0x260	; 0x260 <PWM_getB>
 53c:	89 2b       	or	r24, r25
 53e:	19 f1       	breq	.+70     	; 0x586 <__vector_18+0x178>
 540:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 544:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 548:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 54c:	1c c0       	rjmp	.+56     	; 0x586 <__vector_18+0x178>
		break;
		
		
		//commande envoie SPI slave
		case 'p':
		SPI_MasterEnvoie(0xB); //arret balayage
 54e:	8b e0       	ldi	r24, 0x0B	; 11
 550:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		SPI_MasterEnvoie(0xC);
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 55a:	15 c0       	rjmp	.+42     	; 0x586 <__vector_18+0x178>
		
		case 'm':
		SPI_MasterEnvoie(0xB); //arret balayage
 55c:	8b e0       	ldi	r24, 0x0B	; 11
 55e:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		SPI_MasterEnvoie(0xD);
 562:	8d e0       	ldi	r24, 0x0D	; 13
 564:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 568:	0e c0       	rjmp	.+28     	; 0x586 <__vector_18+0x178>
		
		case 'l':
		SPI_MasterEnvoie(0x6); //toggle balayage
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 570:	0a c0       	rjmp	.+20     	; 0x586 <__vector_18+0x178>

		default:
		USART0_sendByte('>');
 572:	8e e3       	ldi	r24, 0x3E	; 62
 574:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
		USART0_sendByte(ByteLu);
 578:	8c 2f       	mov	r24, r28
 57a:	0e 94 8e 01 	call	0x31c	; 0x31c <USART0_sendByte>
		USART0_sendString(" => Commande inconnue !");
 57e:	8c e3       	ldi	r24, 0x3C	; 60
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>
		break;

	}
}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	cf 91       	pop	r28
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <main>:


int main(void)
{
	//Init port C:
	DDRC = DEBUG_LED; //definition de la direction des pins du poirt C
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	87 b9       	out	0x07, r24	; 7
	PORTC = DEBUG_LED; //extinction/allumage des ports C
 5ae:	88 b9       	out	0x08, r24	; 8
	
	//init interrupt
	sei(); //activation interruptions global
 5b0:	78 94       	sei
	
	USART0_init(103); //init UART à 9600 Baud
 5b2:	87 e6       	ldi	r24, 0x67	; 103
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 83 01 	call	0x306	; 0x306 <USART0_init>
	USART0_sendString("Demarrage du robot...");
 5ba:	84 e5       	ldi	r24, 0x54	; 84
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>
	
	timer0_init(195); //init du timer
 5c2:	83 ec       	ldi	r24, 0xC3	; 195
 5c4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <timer0_init>
	
	moteur_init(); //init du PWM et des PINs moteurs
 5c8:	0e 94 a3 00 	call	0x146	; 0x146 <moteur_init>
	
	SPI_init(); //init de la com SPI
 5cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SPI_init>
	
	USART0_sendString("...OK!");
 5d0:	8a e6       	ldi	r24, 0x6A	; 106
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 96 01 	call	0x32c	; 0x32c <USART0_sendString>
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <main+0x2e>

000005da <__tablejump2__>:
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	05 90       	lpm	r0, Z+
 5e0:	f4 91       	lpm	r31, Z
 5e2:	e0 2d       	mov	r30, r0
 5e4:	09 94       	ijmp

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
