
UC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000692  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008001e2  008001e2  00000808  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001221  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071a  00000000  00000000  00003842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_14>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_18>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	a2 02       	muls	r26, r18
  6a:	0d 03       	fmul	r16, r21
  6c:	c8 02       	muls	r28, r24
  6e:	0d 03       	fmul	r16, r21
  70:	0d 03       	fmul	r16, r21
  72:	0d 03       	fmul	r16, r21
  74:	0d 03       	fmul	r16, r21
  76:	0d 03       	fmul	r16, r21
  78:	0d 03       	fmul	r16, r21
  7a:	0d 03       	fmul	r16, r21
  7c:	0d 03       	fmul	r16, r21
  7e:	0d 03       	fmul	r16, r21
  80:	0d 03       	fmul	r16, r21
  82:	0d 03       	fmul	r16, r21
  84:	0d 03       	fmul	r16, r21
  86:	0d 03       	fmul	r16, r21
  88:	0d 03       	fmul	r16, r21
  8a:	0d 03       	fmul	r16, r21
  8c:	0d 03       	fmul	r16, r21
  8e:	0d 03       	fmul	r16, r21
  90:	0d 03       	fmul	r16, r21
  92:	0d 03       	fmul	r16, r21
  94:	0d 03       	fmul	r16, r21
  96:	0d 03       	fmul	r16, r21
  98:	0d 03       	fmul	r16, r21
  9a:	0d 03       	fmul	r16, r21
  9c:	0d 03       	fmul	r16, r21
  9e:	0d 03       	fmul	r16, r21
  a0:	0d 03       	fmul	r16, r21
  a2:	0d 03       	fmul	r16, r21
  a4:	0d 03       	fmul	r16, r21
  a6:	0d 03       	fmul	r16, r21
  a8:	0d 03       	fmul	r16, r21
  aa:	0d 03       	fmul	r16, r21
  ac:	0d 03       	fmul	r16, r21
  ae:	0d 03       	fmul	r16, r21
  b0:	0d 03       	fmul	r16, r21
  b2:	0d 03       	fmul	r16, r21
  b4:	0d 03       	fmul	r16, r21
  b6:	0d 03       	fmul	r16, r21
  b8:	0d 03       	fmul	r16, r21
  ba:	0d 03       	fmul	r16, r21
  bc:	0d 03       	fmul	r16, r21
  be:	0d 03       	fmul	r16, r21
  c0:	0d 03       	fmul	r16, r21
  c2:	0d 03       	fmul	r16, r21
  c4:	0d 03       	fmul	r16, r21
  c6:	0d 03       	fmul	r16, r21
  c8:	0d 03       	fmul	r16, r21
  ca:	0d 03       	fmul	r16, r21
  cc:	0d 03       	fmul	r16, r21
  ce:	0d 03       	fmul	r16, r21
  d0:	0d 03       	fmul	r16, r21
  d2:	0d 03       	fmul	r16, r21
  d4:	5f 02       	muls	r21, r31
  d6:	0d 03       	fmul	r16, r21
  d8:	0d 03       	fmul	r16, r21
  da:	94 02       	muls	r25, r20
  dc:	73 02       	muls	r23, r19
  de:	0d 03       	fmul	r16, r21
  e0:	0d 03       	fmul	r16, r21
  e2:	0d 03       	fmul	r16, r21
  e4:	0d 03       	fmul	r16, r21
  e6:	0d 03       	fmul	r16, r21
  e8:	0d 03       	fmul	r16, r21
  ea:	f5 02       	muls	r31, r21
  ec:	f1 02       	muls	r31, r17
  ee:	0d 03       	fmul	r16, r21
  f0:	f9 02       	muls	r31, r25
  f2:	ed 02       	muls	r30, r29
  f4:	8d 02       	muls	r24, r29
  f6:	0d 03       	fmul	r16, r21
  f8:	9b 02       	muls	r25, r27
  fa:	0d 03       	fmul	r16, r21
  fc:	0d 03       	fmul	r16, r21
  fe:	0d 03       	fmul	r16, r21
 100:	0d 03       	fmul	r16, r21
 102:	0d 03       	fmul	r16, r21
 104:	0d 03       	fmul	r16, r21
 106:	86 02       	muls	r24, r22

00000108 <__ctors_end>:
 108:	11 24       	eor	r1, r1
 10a:	1f be       	out	0x3f, r1	; 63
 10c:	cf ef       	ldi	r28, 0xFF	; 255
 10e:	d8 e0       	ldi	r29, 0x08	; 8
 110:	de bf       	out	0x3e, r29	; 62
 112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
 114:	11 e0       	ldi	r17, 0x01	; 1
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b1 e0       	ldi	r27, 0x01	; 1
 11a:	e2 e9       	ldi	r30, 0x92	; 146
 11c:	f6 e0       	ldi	r31, 0x06	; 6
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
 120:	05 90       	lpm	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	a2 3e       	cpi	r26, 0xE2	; 226
 126:	b1 07       	cpc	r27, r17
 128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	a2 ee       	ldi	r26, 0xE2	; 226
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
 132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
 134:	a7 3e       	cpi	r26, 0xE7	; 231
 136:	b2 07       	cpc	r27, r18
 138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
 13a:	0e 94 29 03 	call	0x652	; 0x652 <main>
 13e:	0c 94 47 03 	jmp	0x68e	; 0x68e <_exit>

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <moteur_init>:
/*
	Initialise les pins definissant le sens du moteur
	Initialise la sortie PWM A et B
*/
void moteur_init(){
	PWM_init();							/*init PWM sur timer1 (PWM non connecté)*/
 146:	0e 94 19 01 	call	0x232	; 0x232 <PWM_init>
	DDRB|=0x01;							/*Init pin sens moteur D*/
 14a:	20 9a       	sbi	0x04, 0	; 4
	DDRD|=0x80;							/*Init pin sens moteur G*/				
 14c:	57 9a       	sbi	0x0a, 7	; 10
	Gavance;							/*init sense moteur G sur avancer (PWM non connecté)*/
 14e:	5f 9a       	sbi	0x0b, 7	; 11
	Davance;							/*init sense moteur D sur avancer (PWM non connecté)*/
 150:	28 9a       	sbi	0x05, 0	; 5
 152:	08 95       	ret

00000154 <stop>:
	Baisse le rapport cyclique à 0%
	!! N'arrete pas le PWM => un petit sursaut existe (contrefaçon du uc ?)
	utiliser PWM_stop();
*/
void stop(){
	commutTourne=0;						/*modif variable état*/
 154:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <commutTourne>
	commutAvance=0;						/*modif variable état*/
 158:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
	Gavance;							/*Moteur G avance (état connu)*/
 15c:	5f 9a       	sbi	0x0b, 7	; 11
	Davance;							/*Moteur G avance (état connu)*/
 15e:	28 9a       	sbi	0x05, 0	; 5
	PWM_setA(0);						/*Application de la vitesse A*/
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
	PWM_setB(0);						/*Application de la vitesse B*/
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 170:	08 95       	ret

00000172 <avancer_toggle>:
	param: vitesse (10bits)
	vitesse du robot
	1: si avance/recule deja STOP
	2: sinon avancer
*/
void avancer_toggle(uint16_t vitesse){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	if(commutAvance){					/*Si déjà entrain d'avancer/reculer*/
 178:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 17c:	88 23       	and	r24, r24
 17e:	19 f0       	breq	.+6      	; 0x186 <avancer_toggle+0x14>
		stop();							/*Stop*/
 180:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 184:	0b c0       	rjmp	.+22     	; 0x19c <avancer_toggle+0x2a>
	}else{								/*sinon = si n'avance pas ou ne recule pas*/
		commutAvance=1;					/*modif variable état*/
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
		Gavance;						/*Moteur G avance*/
 18c:	5f 9a       	sbi	0x0b, 7	; 11
		Davance;						/*Moteur D avance*/
 18e:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);				/*Application de la vitesse A*/
 190:	ce 01       	movw	r24, r28
 192:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);				/*Application de la vitesse B*/
 196:	ce 01       	movw	r24, r28
 198:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <reculer_toggle>:
	param: vitesse (10bits)
	vitesse du robot
	1: si avance/recule deja STOP
	2: sinon reculer
*/
void reculer_toggle(uint16_t vitesse){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
	if(commutAvance){					/*Si déjà entrain d'avancer/reculer*/
 1a8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 1ac:	88 23       	and	r24, r24
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <reculer_toggle+0x14>
		stop();							/*Stop*/
 1b0:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <reculer_toggle+0x2a>
	}else{								/*sinon = si n'avance pas ou ne recule pas*/
		commutAvance=1;					/*modif variable état*/
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
		Grecule;						/*Moteur G recule*/
 1bc:	5f 98       	cbi	0x0b, 7	; 11
		Drecule;						/*Moteur D recule*/
 1be:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);				/*Application de la vitesse A*/
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);				/*Application de la vitesse B*/
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <tournerGauche_toggle>:
	Fonctionnement du toogle
	1: si tourne deja (dans un sens ou dans l'autre) STOP
	2: sinon tourner à gauche
	param: vitesse (10bits)
*/
void tournerGauche_toggle(uint16_t vitesse){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	if (commutTourne){					/*Si déjà entrain de tourner*/
 1d8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <commutTourne>
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <tournerGauche_toggle+0x14>
		stop();							/*Stop*/
 1e0:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <tournerGauche_toggle+0x2a>
	}else{								/*sinon = si ne tourne pas*/
		commutTourne=1;					/*modif variable état*/
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <commutTourne>
		Grecule;						/*Moteur G recule*/
 1ec:	5f 98       	cbi	0x0b, 7	; 11
		Davance;						/*Moteur D avance*/
 1ee:	28 9a       	sbi	0x05, 0	; 5
		PWM_setA(vitesse);				/*Application de la vitesse A*/
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);				/*Application de la vitesse B*/
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <tournerDroite_toggle>:
	Fonctionnement du toogle
	1: si tourne deja (dans un sens ou dans l'autre) STOP
	2: sinon tourner à droite
	param: vitesse (10bits)
*/
void tournerDroite_toggle(uint16_t vitesse){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	if (commutTourne){					/*Si déjà entrain de tourner*/
 208:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <commutTourne>
 20c:	88 23       	and	r24, r24
 20e:	19 f0       	breq	.+6      	; 0x216 <tournerDroite_toggle+0x14>
		stop();							/*Stop*/
 210:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
 214:	0b c0       	rjmp	.+22     	; 0x22c <tournerDroite_toggle+0x2a>
	}else{								/*sinon = si ne tourne pas*/
		commutTourne=1;					/*modif variable état*/
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <commutTourne>
		Gavance;						/*Moteur G avance*/
 21c:	5f 9a       	sbi	0x0b, 7	; 11
		Drecule;						/*Moteur D recule*/
 21e:	28 98       	cbi	0x05, 0	; 5
		PWM_setA(vitesse);				/*Application de la vitesse A*/
 220:	ce 01       	movw	r24, r28
 222:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		PWM_setB(vitesse);				/*Application de la vitesse B*/
 226:	ce 01       	movw	r24, r28
 228:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
	}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <PWM_init>:
	init timer1 en PWM
*/
void PWM_init(){
	/*PWM sur PB1 et PB2*/
	/*PIN en output PB1 et PB2*/
	DDRB |= 0x06;							/*0000 0110						*/
 232:	84 b1       	in	r24, 0x04	; 4
 234:	86 60       	ori	r24, 0x06	; 6
 236:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(0x06);						/*0000 0110 mise à 0L des ports	*/
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	89 7f       	andi	r24, 0xF9	; 249
 23c:	85 b9       	out	0x05, r24	; 5
	

	TCCR1A=0x03; /* ^^ ^^ -- 11(mode10bits) => ici 0000 0011=0x03 POUR fonctionnement 1010 0011=0xA3 */
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	/*	COM1A[1:0]:00 pas de PWM sur A / :10 PWM sur A	*/
	/*	COM1A[1:0]:00 pas de PWM sur B / :10 PWM sur B	*/
	/*	-- reserved	*/
	/*	WGM1[1:0]:11 PWM, phase correct, 10-bit(max)	*/
	TCCR1B=0x09; /* 00(osef) - 01(mode10bits) 001(prescal) => ici 0000 1001 */
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 24a:	08 95       	ret

0000024c <PWM_getA>:
/*
	get rapport cyclique A
	retourn rapport cyclique effectif
*/
uint16_t PWM_getA(){
	return OCR1AL + (OCR1AH<<8);			/*Retour de la val des 2 registres en 10bits*/
 24c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 250:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	98 2f       	mov	r25, r24
 258:	88 27       	eor	r24, r24
}
 25a:	82 0f       	add	r24, r18
 25c:	91 1d       	adc	r25, r1
 25e:	08 95       	ret

00000260 <PWM_getB>:
/*
	get rapport cyclique B
	retourn rapport cyclique effectif
*/
uint16_t PWM_getB(){
	return OCR1BL + (OCR1BH<<8);			/*Retour de la val des 2 registres en 10bits*/
 260:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 264:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	98 2f       	mov	r25, r24
 26c:	88 27       	eor	r24, r24
}
 26e:	82 0f       	add	r24, r18
 270:	91 1d       	adc	r25, r1
 272:	08 95       	ret

00000274 <PWM_start>:

/*
	Active PWM
*/
void PWM_start(){
	TCCR1A|=0xA0;							/*activation PWM*/
 274:	e0 e8       	ldi	r30, 0x80	; 128
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 6a       	ori	r24, 0xA0	; 160
 27c:	80 83       	st	Z, r24
 27e:	08 95       	ret

00000280 <PWM_stop>:

/*
	Desactive PWM
*/
void PWM_stop(){
	TCCR1A&=0x0F;							/*desactivation PWM*/
 280:	e0 e8       	ldi	r30, 0x80	; 128
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <PWM_setA>:

/*
	Modifie rapport cyclique sortie A
	Param: nouvelle valeur entre 0 et 1024
*/
void PWM_setA(uint16_t OCR){
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
	
	/*etrangement, il reste un petit "sursaut" de PWM à 0*/
	/*Pour corriger cela, il suffit d'arrreter tout simplement le PWM*/
	if(OCR==0){								/*Si mise à 0 du PWM*/
 292:	89 2b       	or	r24, r25
 294:	19 f4       	brne	.+6      	; 0x29c <PWM_setA+0x10>
		PWM_stop();							/*Arret du PWM*/
 296:	0e 94 40 01 	call	0x280	; 0x280 <PWM_stop>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <PWM_setA+0x14>
	}
	else{
		PWM_start();						/*Sinon, forcage allumage PWM (n'interfere pas)*/
 29c:	0e 94 3a 01 	call	0x274	; 0x274 <PWM_start>
	}
	/*Application de la valeur du rapport cyclique dans les registres*/
	OCR1AH=(uint8_t)(OCR>>8);
 2a0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL=(uint8_t)OCR;
 2a4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <PWM_setB>:

/*
	Modifie rapport cyclique sortie B
	Param: nouvelle valeur entre 0 et 1024
*/
void PWM_setB(uint16_t OCR){
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
	
	/*etrangement, il reste un petit "sursaut" de PWM à 0*/
	/*Pour corriger cela, il suffit d'arrreter tout simplement le PWM*/
	if(OCR==0){								/*Si mise à 0 du PWM*/
 2b4:	89 2b       	or	r24, r25
 2b6:	19 f4       	brne	.+6      	; 0x2be <PWM_setB+0x10>
		PWM_stop();							/*Arret du PWM*/
 2b8:	0e 94 40 01 	call	0x280	; 0x280 <PWM_stop>
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <PWM_setB+0x14>
	}
	else{
		PWM_start();						/*Sinon, forcage allumage PWM (n'interfere pas)*/
 2be:	0e 94 3a 01 	call	0x274	; 0x274 <PWM_start>
	}
	/*Application de la valeur du rapport cyclique dans les registres*/
	OCR1BH=(uint8_t)(OCR>>8);
 2c2:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
	OCR1BL=(uint8_t)OCR;
 2c6:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <SPI_init>:
		MOSI et SCK en output le reste en input
		MOSI:	PB3
		SCK:	PB5
		MISO:	PB4
	*/
	DDRB |= (1<<3)|(1<<5);								/*SCK MOSI output*/
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	88 62       	ori	r24, 0x28	; 40
 2d4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<4);									/*MISO input*/
 2d6:	24 98       	cbi	0x04, 4	; 4

	/*activation du SPI en master avec prescaler de /128*/
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
 2d8:	83 e5       	ldi	r24, 0x53	; 83
 2da:	8c bd       	out	0x2c, r24	; 44
 2dc:	08 95       	ret

000002de <SPI_MasterEnvoie>:
/*
	Envoie 8 bits
	Param: data => donnée à envoyer
*/
void SPI_MasterEnvoie(unsigned char data){
	SPDR = data;										/*ecriture de data dans buffer d'envoie*/
 2de:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));							/*attendre que la transmission se termine*/
 2e0:	0d b4       	in	r0, 0x2d	; 45
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <SPI_MasterEnvoie+0x2>
}
 2e6:	08 95       	ret

000002e8 <SPI_MasterEnvoieReception>:
	Envoie 8 bits puis attend la reception de 8 bits
	Param: data => donnée à envoyer
	Retourn: donnée reçue
*/
uint8_t SPI_MasterEnvoieReception(unsigned char data){
	SPI_MasterEnvoie(data);								/*envoie de la donnée*/
 2e8:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
 2ec:	83 ef       	ldi	r24, 0xF3	; 243
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	01 97       	sbiw	r24, 0x01	; 1
	
	/*Attendre traitement du slave*/
	uint16_t i=0;
	for(i=500;i>1;i--);
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <SPI_MasterEnvoieReception+0x8>
	
	SPDR = 0;											/*Envoie de 0 (pour envoyer les coups d'horologe)*/
 2f4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1 << SPIF)));						/*attendre fin com*/
 2f6:	0d b4       	in	r0, 0x2d	; 45
 2f8:	07 fe       	sbrs	r0, 7
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <SPI_MasterEnvoieReception+0xe>

	return SPDR;										/*Envoie reception*/
 2fc:	8e b5       	in	r24, 0x2e	; 46
 2fe:	08 95       	ret

00000300 <timer0_init>:
*/
void timer0_init(uint8_t varOCR0A){
	/*init timer interrupt pour led debug, rapport d'etat*/
	/*timer 0 (8 bits ""malheureusement"")*/
	/*se referer au datasheet atmel*/
	TCCR0A=0x00; /*00 00 -- 00*/
 300:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x05; /*0 0 -- 0 101 (/1024 prescaler)*/
 302:	95 e0       	ldi	r25, 0x05	; 5
 304:	95 bd       	out	0x25, r25	; 37
	TCNT0=0; /*init*/
 306:	16 bc       	out	0x26, r1	; 38
	OCR0A=varOCR0A; /*valeur à comparer avec TCNT0 pour générer inter*/
 308:	87 bd       	out	0x27, r24	; 39
	TIMSK0=0x02; /*----- 010 gestion de l'interruption generé par timer0 (3 interuptions possibles => x1x = COMPA (OCR0A)*/
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 310:	08 95       	ret

00000312 <USART0_init>:
	param: ubrr
	ubrr donne le baud de la communication, se referrer au tableau excel pour plus d'informations sur son calcul
*/
void USART0_init(uint16_t ubrr){
	/*voir tableau excel pour calcul BAUD*/
	UBRR0H = (uint8_t)(ubrr>>8);			/*def baud 1/2*/
 312:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)ubrr;					/*def baud 2/2*/
 316:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = 0x98;	/*	1(interrupt en RX) 0(interrupt en TX) 0(interrupt data reg empty) 1(RX en) 1(TX en) 0(8 bits) 0(9e bit) 0(9e bit)	*/
 31a:	88 e9       	ldi	r24, 0x98	; 152
 31c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = 0x06;	/*	00(Asynchrone) 00(parity disabled) 0(1 stop bit) 11(8bit) 0(clock polarity: falling edge)							*/
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 326:	08 95       	ret

00000328 <USART0_sendByte>:
	Envoie un octet (byte) de donnée
	param: data
	data est la donnée à envoyer 
*/
void USART0_sendByte(unsigned char data){
	while (!( UCSR0A & (1<<UDRE0)));		/*attendre que le buffer se libere*/
 328:	e0 ec       	ldi	r30, 0xC0	; 192
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	90 81       	ld	r25, Z
 32e:	95 ff       	sbrs	r25, 5
 330:	fd cf       	rjmp	.-6      	; 0x32c <USART0_sendByte+0x4>
	UDR0=data;								/*envoie de data en l'inscivant dans le buffer d'envoi*/
 332:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 336:	08 95       	ret

00000338 <USART0_sendString>:
	Envoie un string et CR+LF (saut de ligne)
	param: data
	String à envoyer
	(utilise USART0_senByte(...))
*/
void USART0_sendString(char* data){
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	8c 01       	movw	r16, r24
	
	/*Traitement du string*/
	uint8_t i=0;
	while ((i<255) & (data[i]!=0))			/*tant que le traitement du string n'est pas finie (limite à 255 pour pas faire le fou)*/
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	88 23       	and	r24, r24
 34a:	b1 f0       	breq	.+44     	; 0x378 <USART0_sendString+0x40>
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d1 e0       	ldi	r29, 0x01	; 1
 350:	f1 2c       	mov	r15, r1
	{
		USART0_sendByte(data[i]);			/*envoie via fonction USART0_sendByte*/
 352:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
		i++;
 356:	cf 5f       	subi	r28, 0xFF	; 255
*/
void USART0_sendString(char* data){
	
	/*Traitement du string*/
	uint8_t i=0;
	while ((i<255) & (data[i]!=0))			/*tant que le traitement du string n'est pas finie (limite à 255 pour pas faire le fou)*/
 358:	f8 01       	movw	r30, r16
 35a:	ec 0f       	add	r30, r28
 35c:	f1 1d       	adc	r31, r1
 35e:	80 81       	ld	r24, Z
 360:	9d 2f       	mov	r25, r29
 362:	cf 3f       	cpi	r28, 0xFF	; 255
 364:	09 f4       	brne	.+2      	; 0x368 <USART0_sendString+0x30>
 366:	9f 2d       	mov	r25, r15
 368:	99 23       	and	r25, r25
 36a:	31 f0       	breq	.+12     	; 0x378 <USART0_sendString+0x40>
 36c:	9d 2f       	mov	r25, r29
 36e:	81 11       	cpse	r24, r1
 370:	01 c0       	rjmp	.+2      	; 0x374 <USART0_sendString+0x3c>
 372:	9f 2d       	mov	r25, r15
 374:	91 11       	cpse	r25, r1
 376:	ed cf       	rjmp	.-38     	; 0x352 <USART0_sendString+0x1a>
	{
		USART0_sendByte(data[i]);			/*envoie via fonction USART0_sendByte*/
		i++;
	}
	/*com sdl*/
	USART0_sendByte(13); /*CR*/
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
	USART0_sendByte(10); /*LF*/
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	08 95       	ret

00000390 <__vector_14>:
/*
	Interruption du timer0 à la comparaison de A
	S'execute toute les 0.01248s pour une valeur OCCRA=195
	Voir tableau Excel pour plus d'infos
*/
ISR (TIMER0_COMPA_vect){
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	
	/*execution toutes les secondes (voir tableau excel)*/
	if(++var_clk>=80){
 3bc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <var_clk>
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <var_clk>
 3c6:	80 35       	cpi	r24, 0x50	; 80
 3c8:	68 f0       	brcs	.+26     	; 0x3e4 <__vector_14+0x54>
		
		if(heartbeat==1){								/*Si heartbeat activé*/
 3ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <__vector_14+0x50>
			/*heartbeat, pour savoir si toutes les composantes du systemes sont OP*/
			PORTC^=DEBUG_LED;							/*clignotement de la LED de debug*/
 3d2:	98 b1       	in	r25, 0x08	; 8
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	89 27       	eor	r24, r25
 3d8:	88 b9       	out	0x08, r24	; 8
			USART0_sendByte('*');						/*envoie d'un heartbeat à l'UART*/
 3da:	8a e2       	ldi	r24, 0x2A	; 42
 3dc:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
		}
		
		var_clk=0;										/*Reset de la var assistant le timer*/
 3e0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <var_clk>
		
	}
	
	/*toutes les 0,4sec (voir tableau excel)*/
	if(++var_t_acq_IR>=32){
 3e4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <var_t_acq_IR>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <var_t_acq_IR>
 3ee:	80 32       	cpi	r24, 0x20	; 32
 3f0:	80 f1       	brcs	.+96     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		
		/*demande du rapport d'état au slave SPI*/
		if(SPI_MasterEnvoieReception(0x09)==0x02){		/*demande rapport avec reponse => obstacle ? (obstacle=0x02)*/
 3f2:	89 e0       	ldi	r24, 0x09	; 9
 3f4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	49 f5       	brne	.+82     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			
			/*Recuperation état slave (ange/mesure)*/
			uint8_t angle =SPI_MasterEnvoieReception(0x0E);		/*voir tableau excel*/
 3fc:	8e e0       	ldi	r24, 0x0E	; 14
 3fe:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 402:	f8 2e       	mov	r15, r24
			uint16_t mesure =SPI_MasterEnvoieReception(0x04);	/*voir tableau excel*/
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 40a:	08 2f       	mov	r16, r24
 40c:	10 e0       	ldi	r17, 0x00	; 0
			mesure +=(SPI_MasterEnvoieReception(0x05)<<8);		/*voir tableau excel*/
 40e:	85 e0       	ldi	r24, 0x05	; 5
 410:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 414:	c8 2f       	mov	r28, r24
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	dc 2f       	mov	r29, r28
 41a:	cc 27       	eor	r28, r28
 41c:	c0 0f       	add	r28, r16
 41e:	d1 1f       	adc	r29, r17
			
			/*Communication des données à l'utilisateur via l'UART*/
			USART0_sendString("Obstacle position: {");
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
			USART0_sendByte(angle);
 428:	8f 2d       	mov	r24, r15
 42a:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
			USART0_sendByte(',');
 42e:	8c e2       	ldi	r24, 0x2C	; 44
 430:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
			USART0_sendByte(mesure);
 434:	8c 2f       	mov	r24, r28
 436:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
			USART0_sendString("}");
 43a:	88 e1       	ldi	r24, 0x18	; 24
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
			
			/*Arret du robot (ou pas)*/
			if(!override_obst){							/*si arret auto activé*/
 442:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <override_obst>
 446:	81 11       	cpse	r24, r1
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				stop();
 44a:	0e 94 aa 00 	call	0x154	; 0x154 <stop>
			}
		}
		var_t_acq_IR=0; /*Reset de la var assistant le timer*/
 44e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <var_t_acq_IR>
	}
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_18>:
/*
	Interruption reception UART
	S'execute à chaques reception d'un char sur l'UART
	Traite la donnée reçue
*/
ISR(USART_RX_vect){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	cf 93       	push	r28
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	
	/*petit truc con: UDR0 sert de buffer reception ET envoie*/
	unsigned char ByteLu=UDR0;							/*Acquisition de la donné reçue*/
 4a2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	/******analyseur syntaxique*****
		Commandes:
		voir tableau excel pour la liste des commandes
	*/
	switch (ByteLu)
 4a6:	8c 2f       	mov	r24, r28
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	bb 97       	sbiw	r30, 0x2b	; 43
 4ae:	e0 35       	cpi	r30, 0x50	; 80
 4b0:	f1 05       	cpc	r31, r1
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__vector_18+0x38>
 4b4:	b2 c0       	rjmp	.+356    	; 0x61a <__vector_18+0x19c>
 4b6:	ec 5c       	subi	r30, 0xCC	; 204
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	0c 94 41 03 	jmp	0x682	; 0x682 <__tablejump2__>
	{
		/*commutation heartbeat*/
		case 'a': 
		if(heartbeat==1){								/*si heartbeat activé*/
 4be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartbeat>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <__vector_18+0x58>
			USART0_sendString("Arret heartbeat");		/*com utilisateur*/
 4c6:	8a e1       	ldi	r24, 0x1A	; 26
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
			heartbeat=0;								/*desactivation heartbeat*/
 4ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartbeat>
			PORTC &= ~DEBUG_LED;						/*Exctinctiond de la led de debug*/
 4d2:	45 98       	cbi	0x08, 5	; 8
 4d4:	ac c0       	rjmp	.+344    	; 0x62e <__vector_18+0x1b0>
		}else{											/*si heartbeat desactivé*/
			USART0_sendString("Lancement heartbeat");	/*com utilisateur*/
 4d6:	8a e2       	ldi	r24, 0x2A	; 42
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
			heartbeat=1;								/*activation heartbeat*/
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartbeat>
 4e4:	a4 c0       	rjmp	.+328    	; 0x62e <__vector_18+0x1b0>
		}
		break;
		
		/*diagnostique de la com SPI*/
		case 'e':
		USART0_sendString("Debut diagnostique");		/*com utilisateur*/
 4e6:	8e e3       	ldi	r24, 0x3E	; 62
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
		/*Demande ACK du slave*/
		if(SPI_MasterEnvoieReception(0x01)==0x05){		/*Envoie/reception ACK voir tableau excel => si réponse SPI*/
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_MasterEnvoieReception>
 4f4:	85 30       	cpi	r24, 0x05	; 5
 4f6:	29 f4       	brne	.+10     	; 0x502 <__vector_18+0x84>
			USART0_sendString("SPI: OK");				/*com utilisateur SPI OK*/
 4f8:	81 e5       	ldi	r24, 0x51	; 81
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
 500:	96 c0       	rjmp	.+300    	; 0x62e <__vector_18+0x1b0>
		}else{											/*si pas de reponse SPI*/
			USART0_sendString("SPI: NOK");				/*com utilisateur SPI nOK*/
 502:	89 e5       	ldi	r24, 0x59	; 89
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
 50a:	91 c0       	rjmp	.+290    	; 0x62e <__vector_18+0x1b0>
		}
		break;
		
		/*commande robot avancer*/
		case 'z':
		avancer_toggle(vitesse);						/*active/deactive avancer*/
 50c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 510:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 514:	0e 94 b9 00 	call	0x172	; 0x172 <avancer_toggle>
		break;
 518:	8a c0       	rjmp	.+276    	; 0x62e <__vector_18+0x1b0>
		
		/*commande robot tourner à gauche*/
		case 'q':
		tournerGauche_toggle(vitesse);					/*active/deactive tourner à gauche*/
 51a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 51e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 522:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <tournerGauche_toggle>
		break;
 526:	83 c0       	rjmp	.+262    	; 0x62e <__vector_18+0x1b0>
		
		/*commande robot tourner à droite*/
		case 'd':
		tournerDroite_toggle(vitesse);					/*active/deactive tourner à droite*/
 528:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 52c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 530:	0e 94 01 01 	call	0x202	; 0x202 <tournerDroite_toggle>
		break;
 534:	7c c0       	rjmp	.+248    	; 0x62e <__vector_18+0x1b0>
		
		/*commande robot reculer*/
		case 's':
		reculer_toggle(vitesse);						/*active/deactive reculer*/
 536:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 53a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 53e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <reculer_toggle>
		break;
 542:	75 c0       	rjmp	.+234    	; 0x62e <__vector_18+0x1b0>
		
		/*commande augmentation vitesse*/
		case '+':
		if(vitesse<VITESSE_MAX_PWM){					/*si PWM pas au max*/
 544:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 548:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 54c:	8f 3f       	cpi	r24, 0xFF	; 255
 54e:	93 40       	sbci	r25, 0x03	; 3
 550:	48 f4       	brcc	.+18     	; 0x564 <__vector_18+0xe6>
			vitesse++;									/*Augmentation de la variable vitesse*/
 552:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 556:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 560:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		if(PWM_getA()>0){								/*Si PWM A pas désactivé*/
 564:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_getA>
 568:	89 2b       	or	r24, r25
 56a:	31 f0       	breq	.+12     	; 0x578 <__vector_18+0xfa>
			PWM_setA(vitesse);							/*Application de la vitesse*/
 56c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 570:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 574:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		}
		if(PWM_getB()>0){								/*Si PWM B pas désactivé*/
 578:	0e 94 30 01 	call	0x260	; 0x260 <PWM_getB>
 57c:	89 2b       	or	r24, r25
 57e:	09 f4       	brne	.+2      	; 0x582 <__vector_18+0x104>
 580:	56 c0       	rjmp	.+172    	; 0x62e <__vector_18+0x1b0>
			PWM_setB(vitesse);							/*Application de la vitesse*/
 582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 586:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 58a:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 58e:	4f c0       	rjmp	.+158    	; 0x62e <__vector_18+0x1b0>
		}
		break;
		
		/*commande diminution vitesse*/
		case '-':
		if(vitesse>VITESSE_MIN_PWM){					/*si PWM pas au min*/
 590:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 594:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 598:	87 39       	cpi	r24, 0x97	; 151
 59a:	91 05       	cpc	r25, r1
 59c:	48 f0       	brcs	.+18     	; 0x5b0 <__vector_18+0x132>
			vitesse--;									/*Diminution de la variable vitesse*/
 59e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		if(PWM_getA()>0){								/*Si PWM A pas désactivé*/
 5b0:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_getA>
 5b4:	89 2b       	or	r24, r25
 5b6:	31 f0       	breq	.+12     	; 0x5c4 <__vector_18+0x146>
			PWM_setA(vitesse);							/*Application de la vitesse*/
 5b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5c0:	0e 94 46 01 	call	0x28c	; 0x28c <PWM_setA>
		}
		if(PWM_getB()>0){								/*Si PWM B pas désactivé*/
 5c4:	0e 94 30 01 	call	0x260	; 0x260 <PWM_getB>
 5c8:	89 2b       	or	r24, r25
 5ca:	89 f1       	breq	.+98     	; 0x62e <__vector_18+0x1b0>
			PWM_setB(vitesse);							/*Application de la vitesse*/
 5cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <PWM_setB>
 5d8:	2a c0       	rjmp	.+84     	; 0x62e <__vector_18+0x1b0>
		
		/**commande envoie SPI slave**/
		
		/*Demande augmentation angle servo-moteur*/
		case 'p':
		SPI_MasterEnvoie(0x0C);							/*demande augmentation angle servo (arret automatique du servo)*/
 5da:	8c e0       	ldi	r24, 0x0C	; 12
 5dc:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 5e0:	26 c0       	rjmp	.+76     	; 0x62e <__vector_18+0x1b0>
		
		/*Demande diminution angle servo-moteur*/
		case 'm':
		SPI_MasterEnvoie(0x0D);							/*demande diminution angle servo (arret automatique du servo)*/
 5e2:	8d e0       	ldi	r24, 0x0D	; 13
 5e4:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 5e8:	22 c0       	rjmp	.+68     	; 0x62e <__vector_18+0x1b0>
		
		/*Demande fin balayage du servo-moteur*/
		case 'l':
		SPI_MasterEnvoie(0x06);							/*Commande desactivation balayage*/
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_MasterEnvoie>
		break;
 5f0:	1e c0       	rjmp	.+60     	; 0x62e <__vector_18+0x1b0>
		
		
		/*Fin arret auto si obstacle*/
		case 'o':
		override_obst=override_obst^1;					/*toggle override*/
 5f2:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <override_obst>
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	89 27       	eor	r24, r25
 5fa:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <override_obst>
		if(override_obst){
 5fe:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <override_obst>
 602:	88 23       	and	r24, r24
 604:	29 f0       	breq	.+10     	; 0x610 <__vector_18+0x192>
			USART0_sendString("Les obstacles ne seront plus traite");		/*com utilisateur*/
 606:	82 e6       	ldi	r24, 0x62	; 98
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
 60e:	0f c0       	rjmp	.+30     	; 0x62e <__vector_18+0x1b0>
		}
		else{
			USART0_sendString("Les obstacles seront maintenant traite");	/*com utilisateur*/
 610:	86 e8       	ldi	r24, 0x86	; 134
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
 618:	0a c0       	rjmp	.+20     	; 0x62e <__vector_18+0x1b0>
		}
		break;

		/*Commande inconnue*/
		default:
		USART0_sendByte('>');							/*com utilisateur*/
 61a:	8e e3       	ldi	r24, 0x3E	; 62
 61c:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
		USART0_sendByte(ByteLu);						/*retour char reçu*/
 620:	8c 2f       	mov	r24, r28
 622:	0e 94 94 01 	call	0x328	; 0x328 <USART0_sendByte>
		USART0_sendString(" => Commande inconnue !");	/*com utilisateur*/
 626:	8d ea       	ldi	r24, 0xAD	; 173
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
		break;

	}
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	cf 91       	pop	r28
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <main>:
int main(void)
{
	/*Init port C:
		DEBUG_LED: output
	*/
	DDRC = DEBUG_LED;									/*definition de la direction des pins du poirt C*/
 652:	80 e2       	ldi	r24, 0x20	; 32
 654:	87 b9       	out	0x07, r24	; 7
	PORTC = DEBUG_LED;									/*extinction/allumage des ports C*/
 656:	88 b9       	out	0x08, r24	; 8
	
	
	USART0_init(103);									/*init UART à 9600 Baud*/
 658:	87 e6       	ldi	r24, 0x67	; 103
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 89 01 	call	0x312	; 0x312 <USART0_init>
	USART0_sendString("Demarrage du robot...");			/*com utilisateur*/
 660:	85 ec       	ldi	r24, 0xC5	; 197
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
	
	timer0_init(195);									/*init du timer pour interrupt timer0*/
 668:	83 ec       	ldi	r24, 0xC3	; 195
 66a:	0e 94 80 01 	call	0x300	; 0x300 <timer0_init>
	
	moteur_init();										/*init du PWM et des PINs moteurs*/
 66e:	0e 94 a3 00 	call	0x146	; 0x146 <moteur_init>
	
	SPI_init();											/*init de la com SPI*/
 672:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SPI_init>
	
	USART0_sendString("...OK!");						/*com utilisateur*/
 676:	8b ed       	ldi	r24, 0xDB	; 219
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 9c 01 	call	0x338	; 0x338 <USART0_sendString>
	
	sei();												/*activation interruptions global*/
 67e:	78 94       	sei
 680:	ff cf       	rjmp	.-2      	; 0x680 <main+0x2e>

00000682 <__tablejump2__>:
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	05 90       	lpm	r0, Z+
 688:	f4 91       	lpm	r31, Z
 68a:	e0 2d       	mov	r30, r0
 68c:	09 94       	ijmp

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
